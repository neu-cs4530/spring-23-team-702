{"files":{"src/classes/PosterSessionAreaController.ts":{"language":"typescript","mutants":[{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"XrltsdvX3_GDGeeCkMF8u\"\nReceived: undefined\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:48:30)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":15,"killedBy":["130"],"coveredBy":["113","114","115","116","117","118","119","130","135","146","147","148","149","150","151"],"location":{"end":{"column":4,"line":66},"start":{"column":42,"line":64}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"cxFxb3n4GiTlVysdlIbqQ\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:47:47)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["130"],"coveredBy":["39","40","41","42","130","131","135","136"],"location":{"end":{"column":4,"line":73},"start":{"column":47,"line":68}}},{"id":"2","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).not.toBeCalled()\n\nExpected number of calls: 0\nReceived number of calls: 1\n\n1: \"65_0aIOp2CRXxONXTkfF6\"\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:52:51)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["131"],"coveredBy":["39","40","41","42","130","131","135","136"],"location":{"end":{"column":36,"line":69},"start":{"column":9,"line":69}}},{"id":"3","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"Jfi4bQpTF1qvqVzgbl2Lv\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:47:47)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["130"],"coveredBy":["39","40","41","42","130","131","135","136"],"location":{"end":{"column":36,"line":69},"start":{"column":9,"line":69}}},{"id":"4","mutatorName":"EqualityOperator","replacement":"this._model.title === title","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"Tr_QEtWyArB74ah87fpnU\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:47:47)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["130"],"coveredBy":["39","40","41","42","130","131","135","136"],"location":{"end":{"column":36,"line":69},"start":{"column":9,"line":69}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"id\": \"eZgR6Ad1ZhiVzeBO-CSAS\",\n    \"imageContents\": \"bxptGYvzkXDFg42-7F5GG\",\n    \"stars\": 1,\n-   \"title\": \"New Title\",\n+   \"title\": \"63tbuTjJKGq4GYbVy-VoA\",\n  }\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:439:72)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":5,"killedBy":["39"],"coveredBy":["39","41","130","135","136"],"location":{"end":{"column":6,"line":72},"start":{"column":38,"line":69}}},{"id":"6","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"KoTX_4zZ8LGkq79BxMimZ\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:455:28)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":5,"killedBy":["41"],"coveredBy":["39","41","130","135","136"],"location":{"end":{"column":36,"line":71},"start":{"column":17,"line":71}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"ybtiPOFZSAdPgFmNhRfAK\"\nReceived: undefined\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:60:38)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":15,"killedBy":["132"],"coveredBy":["113","114","115","116","117","118","119","132","135","146","147","148","149","150","151"],"location":{"end":{"column":4,"line":80},"start":{"column":50,"line":78}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"id\": \"nTjjpAdqhxYtoPjj3jXpV\",\n-   \"imageContents\": \"tOGWLp_Cj8BmxUdQVtnjt\",\n+   \"imageContents\": \"9OIqou03h5kAKmrwCwgSY\",\n    \"stars\": 1,\n    \"title\": \"New Title\",\n  }\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:439:72)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["39"],"coveredBy":["39","40","41","42","132","133","135","136"],"location":{"end":{"column":4,"line":89},"start":{"column":63,"line":82}}},{"id":"9","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).not.toBeCalled()\n\nExpected number of calls: 0\nReceived number of calls: 1\n\n1: \"a8xoqC0xXLcXraTM27ax2\"\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:64:59)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["133"],"coveredBy":["39","40","41","42","132","133","135","136"],"location":{"end":{"column":52,"line":83},"start":{"column":9,"line":83}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"YVJS-aQrsHA4TYFsxM2lx\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:59:55)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["132"],"coveredBy":["39","40","41","42","132","133","135","136"],"location":{"end":{"column":52,"line":83},"start":{"column":9,"line":83}}},{"id":"11","mutatorName":"EqualityOperator","replacement":"this._model.imageContents === imageContents","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"fe5bFDTtaTwMDJmZQXoVV\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:59:55)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":8,"killedBy":["132"],"coveredBy":["39","40","41","42","132","133","135","136"],"location":{"end":{"column":52,"line":83},"start":{"column":9,"line":83}}},{"id":"12","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"id\": \"xxqbYHF4ZAbW1vIGVwyS3\",\n-   \"imageContents\": \"Y-1T325YV_lKUwDeZIfuy\",\n+   \"imageContents\": \"tdZF0Yl1JUlIOh1QH2z7q\",\n    \"stars\": 1,\n    \"title\": \"New Title\",\n  }\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:439:72)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":5,"killedBy":["39"],"coveredBy":["39","42","132","135","136"],"location":{"end":{"column":6,"line":88},"start":{"column":54,"line":83}}},{"id":"13","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["39","42","132","135","136"],"location":{"end":{"column":35,"line":86},"start":{"column":33,"line":86}}},{"id":"14","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: \"iTkfUWAKguBlVdLedJReN\"\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:463:28)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":5,"killedBy":["42"],"coveredBy":["39","42","132","135","136"],"location":{"end":{"column":44,"line":87},"start":{"column":17,"line":87}}},{"id":"15","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(element).toHaveTextContent()\n\nExpected element to have text content:\n  Number of stars: undefined\nReceived:\n  StarNumber of stars:\n\nIgnored nodes: comments, <script />, <style />\n\u001b[36m<html\u001b[39m\n  \u001b[33mdata-theme\u001b[39m=\u001b[32m\"light\"\u001b[39m\n  \u001b[33mstyle\u001b[39m=\u001b[32m\"--chakra-ui-color-mode: light;\"\u001b[39m\n\u001b[36m>\u001b[39m\n  \u001b[36m<head />\u001b[39m\n  \u001b[36m<body\u001b[39m\n    \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-ui-light\"\u001b[39m\n  \u001b[36m>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n    \u001b[36m/>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__overlay css-hdd9l7\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"1\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33mdata-focus-lock-disabled\u001b[39m=\u001b[32m\"false\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<div\u001b[39m\n          \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content-container css-v9b9hc\"\u001b[39m\n          \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[36m<section\u001b[39m\n            \u001b[33maria-describedby\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[33maria-labelledby\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[33maria-modal\u001b[39m=\u001b[32m\"true\"\u001b[39m\n            \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content css-hxtskf\"\u001b[39m\n            \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal-1\"\u001b[39m\n            \u001b[33mrole\u001b[39m=\u001b[32m\"dialog\"\u001b[39m\n            \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1; transform: none;\"\u001b[39m\n            \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n          \u001b[36m>\u001b[39m\n            \u001b[36m<header\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__header css-9fgtzh\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[0mtitle-AKKCt1P-df9GPibPsca-h\u001b[0m\n              \u001b[0m \u001b[0m\n            \u001b[36m</header>\u001b[39m\n            \u001b[36m<button\u001b[39m\n              \u001b[33maria-label\u001b[39m=\u001b[32m\"Close\"\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__close-btn css-1iqbypn\"\u001b[39m\n              \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<svg\u001b[39m\n                \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-icon css-onkibi\"\u001b[39m\n                \u001b[33mfocusable\u001b[39m=\u001b[32m\"false\"\u001b[39m\n                \u001b[33mviewBox\u001b[39m=\u001b[32m\"0 0 24 24\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[36m<path\u001b[39m\n                  \u001b[33md\u001b[39m=\u001b[32m\"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\"\u001b[39m\n                  \u001b[33mfill\u001b[39m=\u001b[32m\"currentColor\"\u001b[39m\n                \u001b[36m/>\u001b[39m\n              \u001b[36m</svg>\u001b[39m\n            \u001b[36m</button>\u001b[39m\n            \u001b[36m<div\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__body css-1x51k4p\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<img\u001b[39m\n                \u001b[33mheight\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n                \u001b[33msrc\u001b[39m=\u001b[32m\"contents-N-GOsAbCrzEkkCOsQ3hWc\"\u001b[39m\n                \u001b[33mwidth\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n              \u001b[36m/>\u001b[39m\n            \u001b[36m</div>\u001b[39m\n            \u001b[36m<footer\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__footer css-k0waxj\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<button\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-button css-mn8nh9\"\u001b[39m\n                \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[0mStar\u001b[0m\n              \u001b[36m</button>\u001b[39m\n              \u001b[0mNumber of stars: \u001b[0m\n            \u001b[36m</footer>\u001b[39m\n          \u001b[36m</section>\u001b[39m\n        \u001b[36m</div>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n  \u001b[36m</body>\u001b[39m\n\u001b[36m</html>\u001b[39m...\n    at /home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/components/Town/interactables/PosterViewerImage.test.tsx:58:45\n    at runWithExpensiveErrorDiagnosticsDisabled (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/config.js:52:12)\n    at checkCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:141:77)\n    at checkRealTimersCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:133:16)\n    at Timeout.task [as _onTimeout] (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-environment-jsdom/node_modules/jsdom/lib/jsdom/browser/Window.js:514:19)\n    at listOnTimeout (node:internal/timers:564:17)\n    at processTimers (node:internal/timers:507:7)","status":"Killed","static":false,"testsCompleted":15,"killedBy":["146"],"coveredBy":["113","114","115","116","117","118","119","128","135","146","147","148","149","150","151"],"location":{"end":{"column":4,"line":96},"start":{"column":30,"line":94}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(element).toHaveTextContent()\n\nExpected element to have text content:\n  Number of stars: 135\nReceived:\n  StarNumber of stars: 134\n\nIgnored nodes: comments, <script />, <style />\n\u001b[36m<html\u001b[39m\n  \u001b[33mdata-theme\u001b[39m=\u001b[32m\"light\"\u001b[39m\n  \u001b[33mstyle\u001b[39m=\u001b[32m\"--chakra-ui-color-mode: light;\"\u001b[39m\n\u001b[36m>\u001b[39m\n  \u001b[36m<head />\u001b[39m\n  \u001b[36m<body\u001b[39m\n    \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-ui-light\"\u001b[39m\n  \u001b[36m>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n    \u001b[36m/>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__overlay css-hdd9l7\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"1\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33mdata-focus-lock-disabled\u001b[39m=\u001b[32m\"false\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<div\u001b[39m\n          \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content-container css-v9b9hc\"\u001b[39m\n          \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[36m<section\u001b[39m\n            \u001b[33maria-describedby\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[33maria-labelledby\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[33maria-modal\u001b[39m=\u001b[32m\"true\"\u001b[39m\n            \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content css-hxtskf\"\u001b[39m\n            \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal-1\"\u001b[39m\n            \u001b[33mrole\u001b[39m=\u001b[32m\"dialog\"\u001b[39m\n            \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1; transform: none;\"\u001b[39m\n            \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n          \u001b[36m>\u001b[39m\n            \u001b[36m<header\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__header css-9fgtzh\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[0mtitle-t8yS_-mCbwnVkcRok5E6b\u001b[0m\n              \u001b[0m \u001b[0m\n            \u001b[36m</header>\u001b[39m\n            \u001b[36m<button\u001b[39m\n              \u001b[33maria-label\u001b[39m=\u001b[32m\"Close\"\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__close-btn css-1iqbypn\"\u001b[39m\n              \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<svg\u001b[39m\n                \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-icon css-onkibi\"\u001b[39m\n                \u001b[33mfocusable\u001b[39m=\u001b[32m\"false\"\u001b[39m\n                \u001b[33mviewBox\u001b[39m=\u001b[32m\"0 0 24 24\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[36m<path\u001b[39m\n                  \u001b[33md\u001b[39m=\u001b[32m\"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\"\u001b[39m\n                  \u001b[33mfill\u001b[39m=\u001b[32m\"currentColor\"\u001b[39m\n                \u001b[36m/>\u001b[39m\n              \u001b[36m</svg>\u001b[39m\n            \u001b[36m</button>\u001b[39m\n            \u001b[36m<div\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__body css-1x51k4p\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<img\u001b[39m\n                \u001b[33mheight\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n                \u001b[33msrc\u001b[39m=\u001b[32m\"contents-A6ioQsrGzYVCOv5WvDG3h\"\u001b[39m\n                \u001b[33mwidth\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n              \u001b[36m/>\u001b[39m\n            \u001b[36m</div>\u001b[39m\n            \u001b[36m<footer\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__footer css-k0waxj\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<button\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-button css-mn8nh9\"\u001b[39m\n                \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[0mStar\u001b[0m\n              \u001b[36m</button>\u001b[39m\n              \u001b[0mNumber of stars: \u001b[0m\n              \u001b[0m134\u001b[0m\n            \u001b[36m</footer>\u001b[39m\n          \u001b[36m</section>\u001b[39m\n        \u001b[36m</div>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n  \u001b[36m</body>\u001b[39m\n\u001b[36m</html>\u001b[39m...\n    at /home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/components/Town/interactables/PosterViewerImage.test.tsx:63:27\n    at runWithExpensiveErrorDiagnosticsDisabled (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/config.js:52:12)\n    at checkCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:141:77)\n    at checkRealTimersCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:133:16)\n    at Timeout.task [as _onTimeout] (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-environment-jsdom/node_modules/jsdom/lib/jsdom/browser/Window.js:514:19)\n    at listOnTimeout (node:internal/timers:564:17)\n    at processTimers (node:internal/timers:507:7)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["146"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":4,"line":108},"start":{"column":35,"line":103}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).not.toBeCalled()\n\nExpected number of calls: 0\nReceived number of calls: 1\n\n1: 1\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:40:50)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["129"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":9,"line":104}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: 2\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:35:46)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["128"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":9,"line":104}}},{"id":"19","mutatorName":"LogicalOperator","replacement":"this._model.stars !== stars || stars > 0","statusReason":"Error: expect(jest.fn()).not.toBeCalled()\n\nExpected number of calls: 0\nReceived number of calls: 1\n\n1: 1\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:40:50)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["129"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":9,"line":104}}},{"id":"20","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).not.toBeCalled()\n\nExpected number of calls: 0\nReceived number of calls: 1\n\n1: 1\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:40:50)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["129"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":36,"line":104},"start":{"column":9,"line":104}}},{"id":"21","mutatorName":"EqualityOperator","replacement":"this._model.stars === stars","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: 2\n\nNumber of calls: 0\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/PosterSessionAreaController.test.ts:35:46)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":9,"killedBy":["128"],"coveredBy":["39","40","41","42","128","129","135","136","146"],"location":{"end":{"column":36,"line":104},"start":{"column":9,"line":104}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["39","40","128","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":40,"line":104}}},{"id":"23","mutatorName":"EqualityOperator","replacement":"stars >= 0","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["39","40","128","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":40,"line":104}}},{"id":"24","mutatorName":"EqualityOperator","replacement":"stars <= 0","statusReason":"Error: expect(element).toHaveTextContent()\n\nExpected element to have text content:\n  Number of stars: 135\nReceived:\n  StarNumber of stars: 134\n\nIgnored nodes: comments, <script />, <style />\n\u001b[36m<html\u001b[39m\n  \u001b[33mdata-theme\u001b[39m=\u001b[32m\"light\"\u001b[39m\n  \u001b[33mstyle\u001b[39m=\u001b[32m\"--chakra-ui-color-mode: light;\"\u001b[39m\n\u001b[36m>\u001b[39m\n  \u001b[36m<head />\u001b[39m\n  \u001b[36m<body\u001b[39m\n    \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-ui-light\"\u001b[39m\n  \u001b[36m>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n    \u001b[36m/>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__overlay css-hdd9l7\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"1\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33mdata-focus-lock-disabled\u001b[39m=\u001b[32m\"false\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<div\u001b[39m\n          \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content-container css-v9b9hc\"\u001b[39m\n          \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[36m<section\u001b[39m\n            \u001b[33maria-describedby\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[33maria-labelledby\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[33maria-modal\u001b[39m=\u001b[32m\"true\"\u001b[39m\n            \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content css-hxtskf\"\u001b[39m\n            \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal-1\"\u001b[39m\n            \u001b[33mrole\u001b[39m=\u001b[32m\"dialog\"\u001b[39m\n            \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1; transform: none;\"\u001b[39m\n            \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n          \u001b[36m>\u001b[39m\n            \u001b[36m<header\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__header css-9fgtzh\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[0mtitle-B0Q8GwjlCzcw1AuNCq2NV\u001b[0m\n              \u001b[0m \u001b[0m\n            \u001b[36m</header>\u001b[39m\n            \u001b[36m<button\u001b[39m\n              \u001b[33maria-label\u001b[39m=\u001b[32m\"Close\"\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__close-btn css-1iqbypn\"\u001b[39m\n              \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<svg\u001b[39m\n                \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-icon css-onkibi\"\u001b[39m\n                \u001b[33mfocusable\u001b[39m=\u001b[32m\"false\"\u001b[39m\n                \u001b[33mviewBox\u001b[39m=\u001b[32m\"0 0 24 24\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[36m<path\u001b[39m\n                  \u001b[33md\u001b[39m=\u001b[32m\"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\"\u001b[39m\n                  \u001b[33mfill\u001b[39m=\u001b[32m\"currentColor\"\u001b[39m\n                \u001b[36m/>\u001b[39m\n              \u001b[36m</svg>\u001b[39m\n            \u001b[36m</button>\u001b[39m\n            \u001b[36m<div\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__body css-1x51k4p\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<img\u001b[39m\n                \u001b[33mheight\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n                \u001b[33msrc\u001b[39m=\u001b[32m\"contents-Xr_7ZtSXGiJT1lpY_wX-Q\"\u001b[39m\n                \u001b[33mwidth\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n              \u001b[36m/>\u001b[39m\n            \u001b[36m</div>\u001b[39m\n            \u001b[36m<footer\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__footer css-k0waxj\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<button\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-button css-mn8nh9\"\u001b[39m\n                \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[0mStar\u001b[0m\n              \u001b[36m</button>\u001b[39m\n              \u001b[0mNumber of stars: \u001b[0m\n              \u001b[0m134\u001b[0m\n            \u001b[36m</footer>\u001b[39m\n          \u001b[36m</section>\u001b[39m\n        \u001b[36m</div>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n  \u001b[36m</body>\u001b[39m\n\u001b[36m</html>\u001b[39m...\n    at /home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/components/Town/interactables/PosterViewerImage.test.tsx:63:27\n    at runWithExpensiveErrorDiagnosticsDisabled (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/config.js:52:12)\n    at checkCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:141:77)\n    at checkRealTimersCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:133:16)\n    at Timeout.task [as _onTimeout] (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-environment-jsdom/node_modules/jsdom/lib/jsdom/browser/Window.js:514:19)\n    at listOnTimeout (node:internal/timers:564:17)\n    at processTimers (node:internal/timers:507:7)","status":"Killed","static":false,"testsCompleted":6,"killedBy":["146"],"coveredBy":["39","40","128","135","136","146"],"location":{"end":{"column":49,"line":104},"start":{"column":40,"line":104}}},{"id":"25","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(element).toHaveTextContent()\n\nExpected element to have text content:\n  Number of stars: 135\nReceived:\n  StarNumber of stars: 134\n\nIgnored nodes: comments, <script />, <style />\n\u001b[36m<html\u001b[39m\n  \u001b[33mdata-theme\u001b[39m=\u001b[32m\"light\"\u001b[39m\n  \u001b[33mstyle\u001b[39m=\u001b[32m\"--chakra-ui-color-mode: light;\"\u001b[39m\n\u001b[36m>\u001b[39m\n  \u001b[36m<head />\u001b[39m\n  \u001b[36m<body\u001b[39m\n    \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-ui-light\"\u001b[39m\n  \u001b[36m>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n    \u001b[36m/>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__overlay css-hdd9l7\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"1\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33mdata-focus-lock-disabled\u001b[39m=\u001b[32m\"false\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<div\u001b[39m\n          \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content-container css-v9b9hc\"\u001b[39m\n          \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[36m<section\u001b[39m\n            \u001b[33maria-describedby\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[33maria-labelledby\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[33maria-modal\u001b[39m=\u001b[32m\"true\"\u001b[39m\n            \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content css-hxtskf\"\u001b[39m\n            \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal-1\"\u001b[39m\n            \u001b[33mrole\u001b[39m=\u001b[32m\"dialog\"\u001b[39m\n            \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1; transform: none;\"\u001b[39m\n            \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n          \u001b[36m>\u001b[39m\n            \u001b[36m<header\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__header css-9fgtzh\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[0mtitle-Axp58a9PHn0bjRAq4gZ0x\u001b[0m\n              \u001b[0m \u001b[0m\n            \u001b[36m</header>\u001b[39m\n            \u001b[36m<button\u001b[39m\n              \u001b[33maria-label\u001b[39m=\u001b[32m\"Close\"\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__close-btn css-1iqbypn\"\u001b[39m\n              \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<svg\u001b[39m\n                \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-icon css-onkibi\"\u001b[39m\n                \u001b[33mfocusable\u001b[39m=\u001b[32m\"false\"\u001b[39m\n                \u001b[33mviewBox\u001b[39m=\u001b[32m\"0 0 24 24\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[36m<path\u001b[39m\n                  \u001b[33md\u001b[39m=\u001b[32m\"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\"\u001b[39m\n                  \u001b[33mfill\u001b[39m=\u001b[32m\"currentColor\"\u001b[39m\n                \u001b[36m/>\u001b[39m\n              \u001b[36m</svg>\u001b[39m\n            \u001b[36m</button>\u001b[39m\n            \u001b[36m<div\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__body css-1x51k4p\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<img\u001b[39m\n                \u001b[33mheight\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n                \u001b[33msrc\u001b[39m=\u001b[32m\"contents-ShE4SaD36CShkWITQgLUU\"\u001b[39m\n                \u001b[33mwidth\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n              \u001b[36m/>\u001b[39m\n            \u001b[36m</div>\u001b[39m\n            \u001b[36m<footer\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__footer css-k0waxj\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<button\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-button css-mn8nh9\"\u001b[39m\n                \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[0mStar\u001b[0m\n              \u001b[36m</button>\u001b[39m\n              \u001b[0mNumber of stars: \u001b[0m\n              \u001b[0m134\u001b[0m\n            \u001b[36m</footer>\u001b[39m\n          \u001b[36m</section>\u001b[39m\n        \u001b[36m</div>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n  \u001b[36m</body>\u001b[39m\n\u001b[36m</html>\u001b[39m...\n    at /home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/components/Town/interactables/PosterViewerImage.test.tsx:63:27\n    at runWithExpensiveErrorDiagnosticsDisabled (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/config.js:52:12)\n    at checkCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:141:77)\n    at checkRealTimersCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:133:16)\n    at Timeout.task [as _onTimeout] (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-environment-jsdom/node_modules/jsdom/lib/jsdom/browser/Window.js:514:19)\n    at listOnTimeout (node:internal/timers:564:17)\n    at processTimers (node:internal/timers:507:7)","status":"Killed","static":false,"testsCompleted":6,"killedBy":["146"],"coveredBy":["39","40","128","135","136","146"],"location":{"end":{"column":6,"line":107},"start":{"column":51,"line":104}}},{"id":"26","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(element).toHaveTextContent()\n\nExpected element to have text content:\n  Number of stars: 135\nReceived:\n  StarNumber of stars: 134\n\nIgnored nodes: comments, <script />, <style />\n\u001b[36m<html\u001b[39m\n  \u001b[33mdata-theme\u001b[39m=\u001b[32m\"light\"\u001b[39m\n  \u001b[33mstyle\u001b[39m=\u001b[32m\"--chakra-ui-color-mode: light;\"\u001b[39m\n\u001b[36m>\u001b[39m\n  \u001b[36m<head />\u001b[39m\n  \u001b[36m<body\u001b[39m\n    \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-ui-light\"\u001b[39m\n  \u001b[36m>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-top-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-left\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column; margin: 0px auto;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<ul\u001b[39m\n        \u001b[33mid\u001b[39m=\u001b[32m\"chakra-toast-manager-bottom-right\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"position: fixed; z-index: 5500; pointer-events: none; display: flex; flex-direction: column;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n      \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n    \u001b[36m/>\u001b[39m\n    \u001b[36m<div\u001b[39m\n      \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-portal\"\u001b[39m\n    \u001b[36m>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__overlay css-hdd9l7\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1;\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"1\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33mdata-focus-lock-disabled\u001b[39m=\u001b[32m\"false\"\u001b[39m\n      \u001b[36m>\u001b[39m\n        \u001b[36m<div\u001b[39m\n          \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content-container css-v9b9hc\"\u001b[39m\n          \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n        \u001b[36m>\u001b[39m\n          \u001b[36m<section\u001b[39m\n            \u001b[33maria-describedby\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[33maria-labelledby\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[33maria-modal\u001b[39m=\u001b[32m\"true\"\u001b[39m\n            \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__content css-hxtskf\"\u001b[39m\n            \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal-1\"\u001b[39m\n            \u001b[33mrole\u001b[39m=\u001b[32m\"dialog\"\u001b[39m\n            \u001b[33mstyle\u001b[39m=\u001b[32m\"opacity: 1; transform: none;\"\u001b[39m\n            \u001b[33mtabindex\u001b[39m=\u001b[32m\"-1\"\u001b[39m\n          \u001b[36m>\u001b[39m\n            \u001b[36m<header\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__header css-9fgtzh\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--header-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[0mtitle-gIRiFPa17p3fJjx2ojGN7\u001b[0m\n              \u001b[0m \u001b[0m\n            \u001b[36m</header>\u001b[39m\n            \u001b[36m<button\u001b[39m\n              \u001b[33maria-label\u001b[39m=\u001b[32m\"Close\"\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__close-btn css-1iqbypn\"\u001b[39m\n              \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<svg\u001b[39m\n                \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-icon css-onkibi\"\u001b[39m\n                \u001b[33mfocusable\u001b[39m=\u001b[32m\"false\"\u001b[39m\n                \u001b[33mviewBox\u001b[39m=\u001b[32m\"0 0 24 24\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[36m<path\u001b[39m\n                  \u001b[33md\u001b[39m=\u001b[32m\"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\"\u001b[39m\n                  \u001b[33mfill\u001b[39m=\u001b[32m\"currentColor\"\u001b[39m\n                \u001b[36m/>\u001b[39m\n              \u001b[36m</svg>\u001b[39m\n            \u001b[36m</button>\u001b[39m\n            \u001b[36m<div\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__body css-1x51k4p\"\u001b[39m\n              \u001b[33mid\u001b[39m=\u001b[32m\"chakra-modal--body-1\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<img\u001b[39m\n                \u001b[33mheight\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n                \u001b[33msrc\u001b[39m=\u001b[32m\"contents-j3m71-rRmgxMvnag-aybM\"\u001b[39m\n                \u001b[33mwidth\u001b[39m=\u001b[32m\"100%\"\u001b[39m\n              \u001b[36m/>\u001b[39m\n            \u001b[36m</div>\u001b[39m\n            \u001b[36m<footer\u001b[39m\n              \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-modal__footer css-k0waxj\"\u001b[39m\n            \u001b[36m>\u001b[39m\n              \u001b[36m<button\u001b[39m\n                \u001b[33mclass\u001b[39m=\u001b[32m\"chakra-button css-mn8nh9\"\u001b[39m\n                \u001b[33mtype\u001b[39m=\u001b[32m\"button\"\u001b[39m\n              \u001b[36m>\u001b[39m\n                \u001b[0mStar\u001b[0m\n              \u001b[36m</button>\u001b[39m\n              \u001b[0mNumber of stars: \u001b[0m\n              \u001b[0m134\u001b[0m\n            \u001b[36m</footer>\u001b[39m\n          \u001b[36m</section>\u001b[39m\n        \u001b[36m</div>\u001b[39m\n      \u001b[36m</div>\u001b[39m\n      \u001b[36m<div\u001b[39m\n        \u001b[33maria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-aria-hidden\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mdata-focus-guard\u001b[39m=\u001b[32m\"true\"\u001b[39m\n        \u001b[33mstyle\u001b[39m=\u001b[32m\"width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;\"\u001b[39m\n        \u001b[33mtabindex\u001b[39m=\u001b[32m\"0\"\u001b[39m\n      \u001b[36m/>\u001b[39m\n    \u001b[36m</div>\u001b[39m\n  \u001b[36m</body>\u001b[39m\n\u001b[36m</html>\u001b[39m...\n    at /home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/components/Town/interactables/PosterViewerImage.test.tsx:63:27\n    at runWithExpensiveErrorDiagnosticsDisabled (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/config.js:52:12)\n    at checkCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:141:77)\n    at checkRealTimersCallback (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/@testing-library/dom/dist/wait-for.js:133:16)\n    at Timeout.task [as _onTimeout] (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-environment-jsdom/node_modules/jsdom/lib/jsdom/browser/Window.js:514:19)\n    at listOnTimeout (node:internal/timers:564:17)\n    at processTimers (node:internal/timers:507:7)","status":"Killed","static":false,"testsCompleted":6,"killedBy":["146"],"coveredBy":["39","40","128","135","136","146"],"location":{"end":{"column":35,"line":106},"start":{"column":17,"line":106}}},{"id":"27","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 3\n\n  Object {\n    \"id\": \"kHSm7YveNxDEH5_IJTSf_\",\n-   \"imageContents\": \"KhMQeldJ-KY4TSw7xl1oy\",\n-   \"stars\": 1,\n-   \"title\": \"New Title\",\n+   \"imageContents\": \"loouwvc2MfIx6xF4NmQn8\",\n+   \"stars\": 0,\n+   \"title\": \"473CIjkHTSfMPEpMXL6t5\",\n  }\n    at Object.<anonymous> (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/.stryker-tmp/sandbox4846914/src/classes/TownController.test.ts:439:72)\n    at Promise.then.completed (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:333:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/utils.js:259:10)\n    at _callCircusTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:277:40)\n    at _runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:209:3)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:97:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at _runTestsForDescribeBlock (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:91:9)\n    at run (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/run.js:31:3)\n    at runAndTransformResultsToJestFormat (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:135:21)\n    at jestAdapter (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:92:19)\n    at runTestInternal (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:411:16)\n    at runTest (/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend/node_modules/jest-runner/build/runTest.js:499:34)","status":"Killed","static":false,"testsCompleted":6,"killedBy":["39"],"coveredBy":["39","40","41","42","135","136"],"location":{"end":{"column":4,"line":136},"start":{"column":65,"line":131}}}],"source":"import { EventEmitter } from 'events';\nimport { useEffect, useState } from 'react';\nimport TypedEventEmitter from 'typed-emitter';\nimport { PosterSessionArea as PosterSessionAreaModel } from '../types/CoveyTownSocket';\n\n/**\n * The events that a PosterSessionAreaController can emit\n */\nexport type PosterSessionAreaEvents = {\n  /**\n   * A posterTitleChange event indicates that the poster title has changed.\n   * Listeners are passed the new state in new title.\n   */\n  posterTitleChange: (title: string | undefined) => void;\n  /**\n   * A posterTitleChange event indicates that the poster title has changed.\n   * Listeners are passed the new state in new title.\n   */\n  posterImageContentsChange: (imageContents: string | undefined) => void;\n  /**\n   * A posterStarChange event indicates that the number of stars on the poster has changed.\n   * Listeners are passed the new number of stars.\n   */\n  posterStarChange: (stars: number) => void;\n};\n\n/**\n * A PosterSessionAreaController manages the state for a PosterSessionArea in the frontend app, serving as a bridge between the poster\n * image that is being displayed in the user's browser and the backend TownService, and ensuring that star updates are\n * synchronized across all the players looking at the poster.\n *\n * The PosterSessionAreaController implements callbacks that handle events from the poster image in this browser window, and\n * emits updates when the state is updated, @see PosterSessionAreaEvents\n */\nexport default class PosterSessionAreaController extends (EventEmitter as new () => TypedEventEmitter<PosterSessionAreaEvents>) {\n  private _model: PosterSessionAreaModel;\n\n  private _playersWhoStarred: string[];\n\n  /**\n   * Constructs a new PosterSessionAreaController, initialized with the state of the\n   * provided posterSessionAreaModel.\n   *\n   * @param posterSessionAreaModel The poster session area model that this controller should represent\n   */\n  constructor(posterSessionAreaModel: PosterSessionAreaModel) {\n    super();\n    this._model = posterSessionAreaModel;\n    this._playersWhoStarred = [];\n  }\n\n  /**\n   * The ID of the poster session area represented by this poster session area controller\n   * This property is read-only: once a PosterSessionAreaController is created, it will always be\n   * tied to the same poster session area ID.\n   */\n  public get id(): string {\n    return this._model.id;\n  }\n\n  /**\n   * The title of the poster assigned to this area, or undefined if there is not one.\n   */\n  public get title(): string | undefined {\n    return this._model.title;\n  }\n\n  public set title(title: string | undefined) {\n    if (this._model.title !== title) {\n      this._model.title = title;\n      this.emit('posterTitleChange', title);\n    }\n  }\n\n  /**\n   * The image of the poster assigned to this area, or undefined if there is not one.\n   */\n  public get imageContents(): string | undefined {\n    return this._model.imageContents;\n  }\n\n  public set imageContents(imageContents: string | undefined) {\n    if (this._model.imageContents !== imageContents) {\n      this._model.imageContents = imageContents;\n      // if we're replacing the poster contents, then reset the players who starred to zero\n      this._playersWhoStarred = [];\n      this.emit('posterImageContentsChange', imageContents);\n    }\n  }\n\n  /**\n   * The number of stars of the poster assigned to this area.\n   */\n  public get stars(): number {\n    return this._model.stars;\n  }\n\n  /**\n   * The number of stars of the poster assigned to this area.\n   *\n   * Changing this value will emit a ‘posterStarChange' event to listeners\n   */\n  public set stars(stars: number) {\n    if (this._model.stars !== stars && stars > 0) {\n      this._model.stars = stars;\n      this.emit('posterStarChange', stars);\n    }\n  }\n\n  public get playersWhoStarred(): string[] {\n    return this._playersWhoStarred;\n  }\n\n  public addPlayerWhoStarred(playerID: string) {\n    this._playersWhoStarred.push(playerID);\n  }\n\n  /**\n   * @returns PosterSessionAreaModel that represents the current state of this PosterSessionAreaController\n   */\n  public posterSessionAreaModel(): PosterSessionAreaModel {\n    return this._model;\n  }\n\n  /**\n   * Applies updates to this poster session area controller's model, setting the fields\n   * image, stars, and title from the updatedModel\n   *\n   * @param updatedModel\n   */\n  public updateFrom(updatedModel: PosterSessionAreaModel): void {\n    // note: this calls the setters; really we're updating the model\n    this.title = updatedModel.title;\n    this.imageContents = updatedModel.imageContents;\n    this.stars = updatedModel.stars;\n  }\n}\n\n/**\n * A hook that returns the number of stars for the poster session area with the given controller\n */\nexport function useStars(controller: PosterSessionAreaController): number {\n  const [stars, setStars] = useState(controller.stars);\n  useEffect(() => {\n    controller.addListener('posterStarChange', setStars);\n    return () => {\n      controller.removeListener('posterStarChange', setStars);\n    };\n  }, [controller]);\n  return stars;\n}\n\n/**\n * A hook that returns the image contents for the poster session area with the given controller\n */\nexport function useImageContents(controller: PosterSessionAreaController): string | undefined {\n  const [imageContents, setImageContents] = useState(controller.imageContents);\n  useEffect(() => {\n    controller.addListener('posterImageContentsChange', setImageContents);\n    return () => {\n      controller.removeListener('posterImageContentsChange', setImageContents);\n    };\n  }, [controller]);\n  return imageContents;\n}\n\n/**\n * A hook that returns the title for the poster session area with the given controller\n */\nexport function useTitle(controller: PosterSessionAreaController): string | undefined {\n  const [title, setTitle] = useState(controller.title);\n  useEffect(() => {\n    controller.addListener('posterTitleChange', setTitle);\n    return () => {\n      controller.removeListener('posterTitleChange', setTitle);\n    };\n  }, [controller]);\n  return title;\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"src/components/Login/TownSelection.test.tsx":{"tests":[{"id":"0","name":"Town Selection Listing public towns is called when rendering (hopefully by a useeffect, this will be checked manually)","location":{"start":{"column":6,"line":127}}},{"id":"1","name":"Town Selection Listing public towns updates every 2000 msec","location":{"start":{"column":6,"line":139}}},{"id":"2","name":"Town Selection Listing public towns stops updating when unmounted","location":{"start":{"column":6,"line":155}}},{"id":"3","name":"Town Selection Listing public towns updates the page with all towns stored in currentPublicTowns","location":{"start":{"column":6,"line":171}}},{"id":"4","name":"Town Selection Listing public towns does not include the hardcoded demo in the listing","location":{"start":{"column":6,"line":194}}},{"id":"5","name":"Town Selection Listing public towns sorts towns by occupancy descending","location":{"start":{"column":6,"line":206}}},{"id":"6","name":"Town Selection Listing public towns represents each row in the table as specified","location":{"start":{"column":6,"line":262}}},{"id":"7","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town by ID includes a connect button, which creates a new TownController and connects with the entered username and coveyTownID","location":{"start":{"column":10,"line":333}}},{"id":"8","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town by ID displays an error toast \"Unable to join town\" if the username is empty","location":{"start":{"column":10,"line":356}}},{"id":"9","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town by ID displays an error toast \"Unable to join town\" if the TownID is empty","location":{"start":{"column":10,"line":370}}},{"id":"10","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town by ID displays an error toast \"Unable to connect to Towns Service\" if an error occurs","location":{"start":{"column":10,"line":385}}},{"id":"11","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town from public town table includes a connect button in each row, which calls Video.setup, doLogin, and connect with the entered username and coveyTownID corresponding to that town","location":{"start":{"column":10,"line":409}}},{"id":"12","name":"Town Selection Creating and joining towns Joining existing towns Joining an existing town from public town table disables the connect button if town is at or over capacity","location":{"start":{"column":10,"line":453}}},{"id":"13","name":"Town Selection Creating and joining towns Creating a new town when clicking create with invalid values displays an error toast \"Unable to create town\" if the username is empty","location":{"start":{"column":12,"line":515}}},{"id":"14","name":"Town Selection Creating and joining towns Creating a new town when clicking create with invalid values displays an error toast \"Unable to create town\" if the newTownName is empty","location":{"start":{"column":12,"line":529}}},{"id":"15","name":"Town Selection Creating and joining towns Creating a new town when clicking create with valid values calls createTown on the apiClient with the provided values (public town)","location":{"start":{"column":12,"line":545}}},{"id":"16","name":"Town Selection Creating and joining towns Creating a new town when clicking create with valid values calls createTown on the apiClient with the provided values (not public town)","location":{"start":{"column":12,"line":563}}},{"id":"17","name":"Town Selection Creating and joining towns Creating a new town when clicking create with valid values displays a toast \"Town newTownName is ready to go!\" when successful","location":{"start":{"column":12,"line":582}}},{"id":"18","name":"Town Selection Creating and joining towns Creating a new town when clicking create with valid values after success, creates a new TownController and connects with the entered username and newly generated townID","location":{"start":{"column":12,"line":610}}},{"id":"19","name":"Town Selection Creating and joining towns Creating a new town when clicking create with valid values displays an error toast \"Unable to connect to Towns Service\" if an error occurs in createTown","location":{"start":{"column":12,"line":639}}}],"source":"/* eslint-disable no-await-in-loop,@typescript-eslint/no-loop-func,no-restricted-syntax */\nimport { ChakraProvider } from '@chakra-ui/react';\nimport '@testing-library/jest-dom';\nimport React from 'react';\nimport { fireEvent, render, RenderResult, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { mock, mockClear, MockProxy, mockReset } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport { act } from 'react-dom/test-utils';\nimport * as TownController from '../../classes/TownController';\nimport { LoginController } from '../../contexts/LoginControllerContext';\nimport { CancelablePromise, Town, TownsService } from '../../generated/client';\nimport * as useLoginController from '../../hooks/useLoginController';\nimport { mockTownController } from '../../TestUtils';\nimport TownSelection from './TownSelection';\n\nconst mockConnect = jest.fn(() => Promise.resolve());\n\nconst mockToast = jest.fn();\njest.mock('../VideoCall/VideoFrontend/hooks/useVideoContext/useVideoContext.ts', () => ({\n  __esModule: true, // this property makes it work\n  default: () => ({ connect: mockConnect }),\n}));\njest.mock('@chakra-ui/react', () => {\n  const ui = jest.requireActual('@chakra-ui/react');\n  const mockUseToast = () => mockToast;\n  return {\n    ...ui,\n    useToast: mockUseToast,\n  };\n});\nfunction toCancelablePromise<T>(p: T): CancelablePromise<T> {\n  return new CancelablePromise(async resolve => {\n    resolve(p);\n  });\n}\nconst listTowns = (suffix: string) =>\n  toCancelablePromise(\n    [\n      {\n        friendlyName: `town1${suffix}`,\n        townID: `1${suffix}`,\n        currentOccupancy: 0,\n        maximumOccupancy: 1,\n      },\n      {\n        friendlyName: `town2${suffix}`,\n        townID: `2${suffix}`,\n        currentOccupancy: 2,\n        maximumOccupancy: 10,\n      },\n      {\n        friendlyName: `town3${suffix}`,\n        townID: `3${suffix}`,\n        currentOccupancy: 1,\n        maximumOccupancy: 1,\n      },\n      {\n        friendlyName: `town4${suffix}`,\n        townID: `4${suffix}`,\n        currentOccupancy: 8,\n        maximumOccupancy: 8,\n      },\n      {\n        friendlyName: `town5${suffix}`,\n        townID: `5${suffix}`,\n        currentOccupancy: 9,\n        maximumOccupancy: 5,\n      },\n      {\n        friendlyName: `town6${suffix}`,\n        townID: `6${suffix}`,\n        currentOccupancy: 99,\n        maximumOccupancy: 100,\n      },\n    ]\n      .map(a => ({\n        sort: Math.random(),\n        value: a,\n      }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(a => a.value),\n  );\n\nexport function wrappedTownSelection() {\n  return (\n    <ChakraProvider>\n      <TownSelection />\n    </ChakraProvider>\n  );\n}\n\ndescribe('Town Selection', () => {\n  let mockTownsService: MockProxy<TownsService>;\n  let useLoginControllerSpy: jest.SpyInstance<LoginController, []>;\n  let mockLoginController: MockProxy<LoginController>;\n  let coveyTownControllerConstructorSpy: jest.SpyInstance<\n    TownController.default,\n    [TownController.ConnectionProperties]\n  >;\n  let mockedTownController: MockProxy<TownController.default>;\n  const expectedProviderVideoToken = nanoid();\n\n  beforeAll(() => {\n    mockTownsService = mock<TownsService>();\n    useLoginControllerSpy = jest.spyOn(useLoginController, 'default');\n    mockLoginController = mock<LoginController>();\n    mockLoginController.townsService = mockTownsService;\n\n    mockedTownController = mockTownController({ providerVideoToken: expectedProviderVideoToken });\n\n    coveyTownControllerConstructorSpy = jest.spyOn(TownController, 'default');\n  });\n  beforeEach(() => {\n    jest.useFakeTimers();\n    mockReset(mockTownsService);\n    mockClear(useLoginControllerSpy);\n    mockClear(mockLoginController);\n    mockClear(mockedTownController);\n    mockClear(coveyTownControllerConstructorSpy);\n    useLoginControllerSpy.mockReturnValue(mockLoginController);\n    coveyTownControllerConstructorSpy.mockReturnValue(mockedTownController);\n    mockedTownController.connect.mockReturnValue(Promise.resolve());\n  });\n  describe('Listing public towns', () => {\n    it('is called when rendering (hopefully by a useeffect, this will be checked manually)', async () => {\n      jest.useRealTimers();\n      mockTownsService.listTowns.mockImplementation(() => listTowns(nanoid()));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(\n        () => {\n          expect(mockTownsService.listTowns).toHaveBeenCalledTimes(1);\n        },\n        { timeout: 200 },\n      );\n      renderData.unmount();\n    });\n    it('updates every 2000 msec', async () => {\n      mockTownsService.listTowns.mockImplementation(() => listTowns(nanoid()));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(1);\n      });\n      jest.advanceTimersByTime(2000);\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(2);\n      });\n      jest.advanceTimersByTime(1000);\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(2);\n      });\n      renderData.unmount();\n    });\n    it('stops updating when unmounted', async () => {\n      mockTownsService.listTowns.mockImplementation(() => listTowns(nanoid()));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(1);\n      });\n      jest.advanceTimersByTime(2000);\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(2);\n      });\n      renderData.unmount();\n      jest.advanceTimersByTime(10000);\n      await waitFor(() => {\n        expect(mockTownsService.listTowns).toBeCalledTimes(2);\n      });\n    });\n    it('updates the page with all towns stored in currentPublicTowns', async () => {\n      const suffix1 = nanoid();\n      const suffix2 = nanoid();\n      const expectedTowns1 = await listTowns(suffix1);\n      const expectedTowns2 = await listTowns(suffix2);\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix1));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expectedTowns1.map(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        );\n      });\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix2));\n      jest.advanceTimersByTime(2000);\n      await waitFor(() => {\n        expectedTowns2.forEach(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        );\n        expectedTowns1.forEach(town =>\n          expect(renderData.queryByText(town.friendlyName)).not.toBeInTheDocument(),\n        );\n      });\n    });\n    it('does not include the hardcoded demo in the listing', async () => {\n      const suffix = nanoid();\n      const expectedTowns1 = await listTowns(suffix);\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expectedTowns1.map(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        );\n      });\n      expect(renderData.queryByText('demoTownName')).not.toBeInTheDocument();\n    });\n    it('sorts towns by occupancy descending', async () => {\n      const suffix1 = nanoid();\n      const suffix2 = nanoid();\n      let expectedTowns1 = await listTowns(suffix1);\n      expectedTowns1 = expectedTowns1.sort((a, b) => b.currentOccupancy - a.currentOccupancy);\n\n      let expectedTowns2 = await listTowns(suffix2);\n      expectedTowns2 = expectedTowns2.sort((a, b) => b.currentOccupancy - a.currentOccupancy);\n\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix1));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expectedTowns1.map(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        );\n      });\n      // All towns are in doc, now make sure they are sorted by occupancy\n      let rows = renderData.getAllByRole('row');\n      for (let i = 1; i < rows.length; i += 1) {\n        // off-by-one for the header row\n        // console.log(rows[i]);\n        const existing = within(rows[i]).getByText(expectedTowns1[i - 1].friendlyName);\n        expect(existing).toBeInTheDocument();\n        for (let j = 0; j < expectedTowns1.length; j += 1) {\n          if (j !== i - 1) {\n            expect(\n              within(rows[i]).queryByText(expectedTowns1[j].friendlyName),\n            ).not.toBeInTheDocument();\n          }\n        }\n      }\n      // Now, do that all again to make sure it sorts EVERY run\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix2));\n      jest.advanceTimersByTime(2000);\n      await waitFor(() =>\n        expectedTowns2.map(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        ),\n      );\n\n      // All towns are in doc, now make sure they are sorted by occupancy\n      rows = renderData.getAllByRole('row');\n      for (let i = 1; i < rows.length; i += 1) {\n        // off-by-one for the header row\n        // console.log(rows[i]);\n        const existing = within(rows[i]).getByText(expectedTowns2[i - 1].friendlyName);\n        expect(existing).toBeInTheDocument();\n        for (let j = 0; j < expectedTowns2.length; j += 1) {\n          if (j !== i - 1) {\n            expect(\n              within(rows[i]).queryByText(expectedTowns2[j].friendlyName),\n            ).not.toBeInTheDocument();\n          }\n        }\n      }\n    });\n    it('represents each row in the table as specified', async () => {\n      const suffix1 = nanoid();\n      let expectedTowns = await listTowns(suffix1);\n      expectedTowns = expectedTowns.sort((a, b) => b.currentOccupancy - a.currentOccupancy);\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix1));\n      const renderData = render(wrappedTownSelection());\n      await waitFor(() => {\n        expectedTowns.forEach(town =>\n          expect(renderData.getByText(town.friendlyName)).toBeInTheDocument(),\n        );\n      });\n      const rows = renderData.getAllByRole('row');\n      expectedTowns.forEach(town => {\n        const row = rows.find(each => within(each).queryByText(town.townID));\n        if (row) {\n          const cells = within(row).queryAllByRole('cell');\n          // Cell order: friendlyName, TownID, occupancy/join + button\n          expect(cells.length).toBe(3);\n          expect(within(cells[0]).queryByText(town.friendlyName)).toBeInTheDocument();\n          expect(within(cells[1]).queryByText(town.townID)).toBeInTheDocument();\n          expect(\n            within(cells[2]).queryByText(`${town.currentOccupancy}/${town.maximumOccupancy}`),\n          ).toBeInTheDocument();\n        } else {\n          fail(`Could not find row for town ${town.townID}`);\n        }\n      });\n    });\n  });\n\n  describe('Creating and joining towns', () => {\n    let renderData: RenderResult<typeof import('@testing-library/dom/types/queries')>;\n    let townIDToJoinField: HTMLInputElement;\n    let userNameField: HTMLInputElement;\n    let joinTownByIDButton: HTMLElement;\n    let expectedTowns: Town[];\n    let newTownNameField: HTMLInputElement;\n    let newTownIsPublicCheckbox: HTMLInputElement;\n    let newTownButton: HTMLElement;\n\n    beforeEach(async () => {\n      jest.useFakeTimers();\n      mockConnect.mockReset();\n      mockToast.mockReset();\n\n      const suffix = nanoid();\n      expectedTowns = await listTowns(suffix);\n      mockTownsService.listTowns.mockImplementation(() => listTowns(suffix));\n      renderData = render(wrappedTownSelection());\n      await waitFor(() => expect(renderData.getByText(`town1${suffix}`)).toBeInTheDocument());\n      townIDToJoinField = renderData.getByPlaceholderText(\n        'ID of town to join, or select from list',\n      ) as HTMLInputElement;\n      userNameField = renderData.getByPlaceholderText('Your name') as HTMLInputElement;\n      joinTownByIDButton = renderData.getByTestId('joinTownByIDButton');\n      newTownIsPublicCheckbox = renderData.getByLabelText('Publicly Listed') as HTMLInputElement;\n      newTownNameField = renderData.getByPlaceholderText('New Town Name') as HTMLInputElement;\n      newTownButton = renderData.getByTestId('newTownButton');\n    });\n    describe('Joining existing towns', () => {\n      describe('Joining an existing town by ID', () => {\n        const joinTownWithOptions = async (params: { coveyTownID: string; userName: string }) => {\n          fireEvent.change(userNameField, { target: { value: params.userName } });\n          await waitFor(() => {\n            expect(userNameField.value).toBe(params.userName);\n          });\n          fireEvent.change(townIDToJoinField, { target: { value: params.coveyTownID } });\n          await waitFor(() => expect(townIDToJoinField.value).toBe(params.coveyTownID));\n          userEvent.click(joinTownByIDButton);\n        };\n\n        it('includes a connect button, which creates a new TownController and connects with the entered username and coveyTownID', async () => {\n          const coveyTownID = nanoid();\n          const userName = nanoid();\n\n          await joinTownWithOptions({\n            coveyTownID,\n            userName,\n          });\n\n          // Check for call sequence\n          await waitFor(() =>\n            expect(coveyTownControllerConstructorSpy).toBeCalledWith({\n              userName,\n              townID: coveyTownID,\n              loginController: mockLoginController,\n            }),\n          );\n          await waitFor(() => expect(mockedTownController.connect).toBeCalled());\n          await waitFor(() => expect(mockConnect).toBeCalledWith(expectedProviderVideoToken));\n          await waitFor(() =>\n            expect(mockLoginController.setTownController).toBeCalledWith(mockedTownController),\n          );\n        });\n        it('displays an error toast \"Unable to join town\" if the username is empty', async () => {\n          const coveyTownID = nanoid();\n          await joinTownWithOptions({\n            coveyTownID,\n            userName: '',\n          });\n          await waitFor(() =>\n            expect(mockToast).toBeCalledWith({\n              description: 'Please select a username',\n              title: 'Unable to join town',\n              status: 'error',\n            }),\n          );\n        });\n        it('displays an error toast \"Unable to join town\" if the TownID is empty', async () => {\n          const userName = nanoid();\n          await joinTownWithOptions({\n            coveyTownID: '',\n            userName,\n          });\n          await waitFor(() =>\n            expect(mockToast).toBeCalledWith({\n              description: 'Please enter a town ID',\n              title: 'Unable to join town',\n              status: 'error',\n            }),\n          );\n        });\n\n        it('displays an error toast \"Unable to connect to Towns Service\" if an error occurs', async () => {\n          const coveyTownID = nanoid();\n          const userName = nanoid();\n          const errorMessage = `Err${nanoid()}`;\n\n          // Configure mocks\n          mockedTownController.connect.mockRejectedValue(new Error(errorMessage));\n\n          await joinTownWithOptions({\n            coveyTownID,\n            userName,\n          });\n\n          // Check for call sequence\n          await waitFor(() =>\n            expect(mockToast).toBeCalledWith({\n              description: `Error: ${errorMessage}`,\n              title: 'Unable to connect to Towns Service',\n              status: 'error',\n            }),\n          );\n        });\n      });\n      describe('Joining an existing town from public town table', () => {\n        it('includes a connect button in each row, which calls Video.setup, doLogin, and connect with the entered username and coveyTownID corresponding to that town', async () => {\n          const rows = renderData.getAllByRole('row');\n          for (const town of expectedTowns) {\n            if (town.currentOccupancy < town.maximumOccupancy) {\n              mockClear(mockedTownController);\n              mockClear(mockLoginController);\n              mockClear(coveyTownControllerConstructorSpy);\n              mockConnect.mockClear();\n              const row = rows.find(each => within(each).queryByText(town.townID));\n              if (row) {\n                const button = within(row).getByRole('button');\n                const username = nanoid();\n                act(() => {\n                  fireEvent.change(userNameField, { target: { value: username } });\n                });\n                await waitFor(() => {\n                  expect(userNameField.value).toBe(username);\n                });\n                act(() => {\n                  fireEvent.click(button);\n                });\n                // userEvent.click(button);\n\n                await waitFor(() =>\n                  expect(coveyTownControllerConstructorSpy).toBeCalledWith({\n                    userName: username,\n                    townID: town.townID,\n                    loginController: mockLoginController,\n                  }),\n                );\n\n                await waitFor(() => expect(mockedTownController.connect).toBeCalled());\n                await waitFor(() => expect(mockConnect).toBeCalledWith(expectedProviderVideoToken));\n                await waitFor(() =>\n                  expect(mockLoginController.setTownController).toBeCalledWith(\n                    mockedTownController,\n                  ),\n                );\n              } else {\n                fail(`Could not find row for town ${town.townID}`);\n              }\n            }\n          }\n        });\n        it('disables the connect button if town is at or over capacity', async () => {\n          const rows = renderData.getAllByRole('row');\n          for (const town of expectedTowns) {\n            if (town.currentOccupancy >= town.maximumOccupancy) {\n              const row = rows.find(each => within(each).queryByText(town.townID));\n              if (row) {\n                const button = within(row).getByRole('button');\n                const username = nanoid();\n                act(() => {\n                  fireEvent.change(userNameField, { target: { value: username } });\n                });\n                await waitFor(() => {\n                  expect(userNameField.value).toBe(username);\n                });\n                act(() => {\n                  fireEvent.click(button);\n                });\n                await waitFor(() => expect(coveyTownControllerConstructorSpy).not.toBeCalled());\n              } else {\n                fail(`Could not find row for town ${town.townID}`);\n              }\n            }\n          }\n        });\n      });\n    });\n    describe('Creating a new town', () => {\n      const createTownWithOptions = async (params: {\n        townName: string;\n        userName: string;\n        togglePublicBox?: boolean;\n        townID?: string;\n        roomPassword?: string;\n        errorMessage?: string;\n      }) => {\n        fireEvent.change(userNameField, { target: { value: params.userName } });\n        await waitFor(() => {\n          expect(userNameField.value).toBe(params.userName);\n        });\n        fireEvent.change(newTownNameField, { target: { value: params.townName } });\n        await waitFor(() => expect(newTownNameField.value).toBe(params.townName));\n        if (params.togglePublicBox) {\n          fireEvent.click(newTownIsPublicCheckbox);\n          await waitFor(() => expect(newTownIsPublicCheckbox.checked).toBe(false));\n        }\n        mockTownsService.createTown.mockClear();\n        if (params.townID && params.roomPassword) {\n          mockTownsService.createTown.mockReturnValue(\n            toCancelablePromise({\n              townID: params.townID,\n              townUpdatePassword: params.roomPassword,\n            }),\n          );\n        } else if (params.errorMessage) {\n          mockTownsService.createTown.mockRejectedValue(new Error(params.errorMessage));\n        } else {\n          fail('Invalid config');\n        }\n        userEvent.click(newTownButton);\n      };\n      describe('when clicking create', () => {\n        describe('with invalid values', () => {\n          it('displays an error toast \"Unable to create town\" if the username is empty', async () => {\n            await createTownWithOptions({\n              userName: '',\n              townName: nanoid(),\n              errorMessage: 'FAIL',\n            });\n            await waitFor(() =>\n              expect(mockToast).toBeCalledWith({\n                title: 'Unable to create town',\n                description: 'Please select a username before creating a town',\n                status: 'error',\n              }),\n            );\n          });\n          it('displays an error toast \"Unable to create town\" if the newTownName is empty', async () => {\n            await createTownWithOptions({\n              townName: '',\n              userName: nanoid(),\n              errorMessage: 'FAIL',\n            });\n            await waitFor(() =>\n              expect(mockToast).toBeCalledWith({\n                title: 'Unable to create town',\n                description: 'Please enter a town name',\n                status: 'error',\n              }),\n            );\n          });\n        });\n        describe('with valid values', () => {\n          it('calls createTown on the apiClient with the provided values (public town)', async () => {\n            const townID = nanoid();\n            const roomPassword = nanoid();\n            const townName = nanoid();\n            await createTownWithOptions({\n              townName,\n              userName: nanoid(),\n              townID,\n              roomPassword,\n            });\n            await waitFor(() =>\n              expect(mockTownsService.createTown).toBeCalledWith({\n                friendlyName: townName,\n                isPubliclyListed: true,\n              }),\n            );\n          });\n\n          it('calls createTown on the apiClient with the provided values (not public town)', async () => {\n            const townID = nanoid();\n            const roomPassword = nanoid();\n            const townName = nanoid();\n            await createTownWithOptions({\n              townName,\n              userName: nanoid(),\n              townID,\n              roomPassword,\n              togglePublicBox: true,\n            });\n            await waitFor(() =>\n              expect(mockTownsService.createTown).toBeCalledWith({\n                friendlyName: townName,\n                isPubliclyListed: false,\n              }),\n            );\n          });\n\n          it('displays a toast \"Town newTownName is ready to go!\" when successful', async () => {\n            const townID = nanoid();\n            const roomPassword = nanoid();\n            const townName = nanoid();\n            await createTownWithOptions({\n              townName,\n              userName: nanoid(),\n              townID,\n              roomPassword,\n              togglePublicBox: true,\n            });\n            await waitFor(() =>\n              expect(mockTownsService.createTown).toBeCalledWith({\n                friendlyName: townName,\n                isPubliclyListed: false,\n              }),\n            );\n            await waitFor(() =>\n              expect(mockToast).toBeCalledWith(\n                expect.objectContaining({\n                  title: `Town ${townName} is ready to go!`,\n                  status: 'success',\n                  isClosable: true,\n                  duration: null,\n                }),\n              ),\n            );\n          });\n          it('after success, creates a new TownController and connects with the entered username and newly generated townID', async () => {\n            const townID = nanoid();\n            const roomPassword = nanoid();\n            const userName = nanoid();\n            const townName = nanoid();\n\n            // Create town\n            await createTownWithOptions({\n              townName,\n              userName,\n              townID,\n              roomPassword,\n              togglePublicBox: true,\n            });\n\n            // Check for call sequence\n            await waitFor(() =>\n              expect(coveyTownControllerConstructorSpy).toBeCalledWith({\n                userName,\n                townID: townID,\n                loginController: mockLoginController,\n              }),\n            );\n            await waitFor(() => expect(mockedTownController.connect).toBeCalled());\n            await waitFor(() => expect(mockConnect).toBeCalledWith(expectedProviderVideoToken));\n            await waitFor(() =>\n              expect(mockLoginController.setTownController).toBeCalledWith(mockedTownController),\n            );\n          });\n          it('displays an error toast \"Unable to connect to Towns Service\" if an error occurs in createTown', async () => {\n            const errorMessage = `Oops#${nanoid()}`;\n            const townName = nanoid();\n            await createTownWithOptions({\n              townName,\n              userName: nanoid(),\n              errorMessage,\n            });\n            await waitFor(() =>\n              expect(mockTownsService.createTown).toBeCalledWith({\n                friendlyName: townName,\n                isPubliclyListed: true,\n              }),\n            );\n            await waitFor(() =>\n              expect(mockToast).toBeCalledWith({\n                title: 'Unable to connect to Towns Service',\n                status: 'error',\n                description: `Error: ${errorMessage}`,\n              }),\n            );\n          });\n        });\n      });\n    });\n  });\n});\n"},"src/classes/TownController.test.ts":{"tests":[{"id":"20","name":"TownController With an unsuccesful connection Throws an error","location":{"start":{"column":6,"line":92}}},{"id":"21","name":"TownController With a successful connection Initializes the properties of the controller","location":{"start":{"column":6,"line":110}}},{"id":"22","name":"TownController With a successful connection Forwards update town calls to local CoveyTownEvents listeners","location":{"start":{"column":6,"line":118}}},{"id":"23","name":"TownController With a successful connection Forwards delete town calls to local CoveyTownEvents listeners","location":{"start":{"column":6,"line":127}}},{"id":"24","name":"TownController With a successful connection Forwards chat messages to local CoveyTownEvents listeners","location":{"start":{"column":6,"line":130}}},{"id":"25","name":"TownController With a successful connection Emits the local player's movement updates to the socket and to locally subscribed CoveyTownEvents listeners","location":{"start":{"column":6,"line":139}}},{"id":"26","name":"TownController With a successful connection Emits locally written chat messages to the socket, and dispatches no other events","location":{"start":{"column":6,"line":158}}},{"id":"27","name":"TownController With a successful connection Emits conversationAreasChanged when a conversation area is created","location":{"start":{"column":6,"line":169}}},{"id":"28","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Emits a conversationAreasChanged event with the updated list of conversation areas if the area is newly occupied","location":{"start":{"column":10,"line":205}}},{"id":"29","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Emits a conversationAreasChanged event with the updated list of converation areas if the area is newly vacant","location":{"start":{"column":10,"line":231}}},{"id":"30","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Does not emit a conversationAreasChanged event if the set of active areas has not changed","location":{"start":{"column":10,"line":251}}},{"id":"31","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Emits a topicChange event if the topic of a conversation area changes","location":{"start":{"column":10,"line":272}}},{"id":"32","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Does not emit a topicChange event if the topic is unchanged","location":{"start":{"column":10,"line":292}}},{"id":"33","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Emits an occupantsChange event if the occupants changed","location":{"start":{"column":10,"line":310}}},{"id":"34","name":"TownController With a successful connection [T2] interactableUpdate events Conversation Area updates Does not emit an occupantsChange if the occupants have not changed","location":{"start":{"column":10,"line":330}}},{"id":"35","name":"TownController With a successful connection [T2] interactableUpdate events Viewing Area updates Updates the viewing area model","location":{"start":{"column":10,"line":373}}},{"id":"36","name":"TownController With a successful connection [T2] interactableUpdate events Viewing Area updates Emits a playbackChange event if isPlaying changes","location":{"start":{"column":10,"line":382}}},{"id":"37","name":"TownController With a successful connection [T2] interactableUpdate events Viewing Area updates Emits a progressChange event if the elapsedTimeSec chagnes","location":{"start":{"column":10,"line":390}}},{"id":"38","name":"TownController With a successful connection [T2] interactableUpdate events Viewing Area updates Emits a videoChange event if the video changes","location":{"start":{"column":10,"line":398}}},{"id":"39","name":"TownController With a successful connection [T2] interactableUpdate events [REE1] PosterSessionAreaController Poster Session Area updates [REE1] interactableUpdate and poster hooks Updates the poster session area model","location":{"start":{"column":10,"line":431}}},{"id":"40","name":"TownController With a successful connection [T2] interactableUpdate events [REE1] PosterSessionAreaController Poster Session Area updates [REE1] interactableUpdate and poster hooks Emits a posterStarChange event if the number of stars changes","location":{"start":{"column":10,"line":440}}},{"id":"41","name":"TownController With a successful connection [T2] interactableUpdate events [REE1] PosterSessionAreaController Poster Session Area updates [REE1] interactableUpdate and poster hooks Emits a posterTitleEvent event if the title changes","location":{"start":{"column":10,"line":448}}},{"id":"42","name":"TownController With a successful connection [T2] interactableUpdate events [REE1] PosterSessionAreaController Poster Session Area updates [REE1] interactableUpdate and poster hooks Emits a posterImageContentsChange event if the image contents changes","location":{"start":{"column":10,"line":456}}},{"id":"43","name":"TownController Processing events that are received over the socket from the townService Emits playersChanged events when players join","location":{"start":{"column":6,"line":485}}},{"id":"44","name":"TownController Processing events that are received over the socket from the townService Emits playersChanged events when players leave","location":{"start":{"column":6,"line":491}}},{"id":"45","name":"TownController Processing events that are received over the socket from the townService Emits playerMoved events when players join","location":{"start":{"column":6,"line":494}}},{"id":"46","name":"TownController Processing events that are received over the socket from the townService Emits playerMoved events when players move","location":{"start":{"column":6,"line":502}}},{"id":"47","name":"TownController Disconnects the socket and clears the coveyTownController when disconnection","location":{"start":{"column":4,"line":518}}}],"source":"import { mock, mockClear, MockProxy } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport { LoginController } from '../contexts/LoginControllerContext';\nimport { ViewingArea } from '../generated/client';\nimport { PosterSessionArea } from '../generated/client';\nimport {\n  EventNames,\n  getEventListener,\n  mockTownControllerConnection,\n  ReceivedEventParameter,\n} from '../TestUtils';\nimport {\n  ChatMessage,\n  ConversationArea as ConversationAreaModel,\n  CoveyTownSocket,\n  Player as PlayerModel,\n  PlayerLocation,\n  ServerToClientEvents,\n  TownJoinResponse,\n} from '../types/CoveyTownSocket';\nimport { isConversationArea, isPosterSessionArea, isViewingArea } from '../types/TypeUtils';\nimport PlayerController from './PlayerController';\nimport PosterSessionAreaController from './PosterSessionAreaController';\nimport TownController, { TownEvents } from './TownController';\nimport ViewingAreaController from './ViewingAreaController';\n\n/**\n * Mocks the socket-io client constructor such that it will always return the same\n * mockSocket instance. Returns that mockSocket instance to the caller of this function,\n * allowing tests to make assertions about the messages emitted to the socket, and also to\n * simulate the receipt of events, @see getEventListener\n */\nconst mockSocket = mock<CoveyTownSocket>();\njest.mock('socket.io-client', () => {\n  const actual = jest.requireActual('socket.io-client');\n  return {\n    ...actual,\n    io: () => mockSocket,\n  };\n});\n\ndescribe('TownController', () => {\n  let mockLoginController: MockProxy<LoginController>;\n  let userName: string;\n  let townID: string;\n  beforeAll(() => {\n    mockLoginController = mock<LoginController>();\n    process.env.REACT_APP_TOWNS_SERVICE_URL = 'test';\n  });\n  let testController: TownController;\n\n  /**\n   * Testing harness that mocks the arrival of an event from the CoveyTownSocket and expects that\n   * a given listener is invoked, optionally with an expected listener parameter.\n   *\n   * Returns a mock listener callback that represents the listener under expectation\n   *\n   * @param receivedEvent\n   * @param receivedParameter\n   * @param listenerToExpect\n   * @param expectedListenerParam\n   * @returns mock listener mock\n   */\n  const emitEventAndExpectListenerFiring = <\n    ReceivedEventFromSocket extends EventNames<ServerToClientEvents>,\n    ExpectedListenerName extends EventNames<TownEvents>,\n  >(\n    receivedEvent: ReceivedEventFromSocket,\n    receivedParameter: ReceivedEventParameter<ReceivedEventFromSocket>,\n    listenerToExpect: ExpectedListenerName,\n    expectedListenerParam?: Parameters<TownEvents[ExpectedListenerName]>[0],\n  ): jest.MockedFunction<TownEvents[ExpectedListenerName]> => {\n    const eventListener = getEventListener(mockSocket, receivedEvent);\n    const mockListener = jest.fn() as jest.MockedFunction<TownEvents[ExpectedListenerName]>;\n    testController.addListener(listenerToExpect, mockListener);\n    eventListener(receivedParameter);\n    if (expectedListenerParam === undefined) {\n      expect(mockListener).toHaveBeenCalled();\n    } else {\n      expect(mockListener).toHaveBeenCalledWith(expectedListenerParam);\n    }\n    return mockListener;\n  };\n\n  beforeEach(() => {\n    mockClear(mockSocket);\n    userName = nanoid();\n    townID = nanoid();\n    testController = new TownController({ userName, townID, loginController: mockLoginController });\n  });\n  describe('With an unsuccesful connection', () => {\n    it('Throws an error', async () => {\n      mockSocket.on.mockImplementation((eventName, eventListener) => {\n        if (eventName === 'disconnect') {\n          const listener = eventListener as () => void;\n          listener();\n        }\n        return mockSocket;\n      });\n      await expect(testController.connect()).rejects.toThrowError();\n      mockSocket.on.mockReset();\n    });\n  });\n  describe('With a successful connection', () => {\n    let townJoinResponse: TownJoinResponse;\n\n    beforeEach(async () => {\n      townJoinResponse = await mockTownControllerConnection(testController, mockSocket);\n    });\n    it('Initializes the properties of the controller', () => {\n      expect(testController.providerVideoToken).toEqual(townJoinResponse.providerVideoToken);\n      expect(testController.friendlyName).toEqual(townJoinResponse.friendlyName);\n      expect(testController.townIsPubliclyListed).toEqual(townJoinResponse.isPubliclyListed);\n      expect(testController.sessionToken).toEqual(townJoinResponse.sessionToken);\n      expect(testController.userID).toEqual(townJoinResponse.userID);\n    });\n\n    it('Forwards update town calls to local CoveyTownEvents listeners', () => {\n      const newFriendlyName = nanoid();\n      emitEventAndExpectListenerFiring(\n        'townSettingsUpdated',\n        { friendlyName: newFriendlyName },\n        'townSettingsUpdated',\n        { friendlyName: newFriendlyName },\n      );\n    });\n    it('Forwards delete town calls to local CoveyTownEvents listeners', () => {\n      emitEventAndExpectListenerFiring('townClosing', undefined, 'disconnect', undefined);\n    });\n    it('Forwards chat messages to local CoveyTownEvents listeners', () => {\n      const message: ChatMessage = {\n        author: nanoid(),\n        body: nanoid(),\n        dateCreated: new Date(),\n        sid: nanoid(),\n      };\n      emitEventAndExpectListenerFiring('chatMessage', message, 'chatMessage', message);\n    });\n    it(\"Emits the local player's movement updates to the socket and to locally subscribed CoveyTownEvents listeners\", () => {\n      const newLocation: PlayerLocation = { ...testController.ourPlayer.location, x: 10, y: 10 };\n      const expectedPlayerUpdate = testController.ourPlayer;\n      expectedPlayerUpdate.location = newLocation;\n      const movedPlayerListener = jest.fn();\n\n      testController.addListener('playerMoved', movedPlayerListener);\n\n      testController.emitMovement(newLocation);\n\n      //Emits the event to the socket\n      expect(mockSocket.emit).toBeCalledWith('playerMovement', newLocation);\n\n      //Emits the playerMovement event to locally subscribed listerners, indicating that the player moved\n      expect(movedPlayerListener).toBeCalledWith(expectedPlayerUpdate);\n\n      //Uses the correct (new) location when emitting that update locally\n      expect(expectedPlayerUpdate.location).toEqual(newLocation);\n    });\n    it('Emits locally written chat messages to the socket, and dispatches no other events', () => {\n      const testMessage: ChatMessage = {\n        author: nanoid(),\n        body: nanoid(),\n        dateCreated: new Date(),\n        sid: nanoid(),\n      };\n      testController.emitChatMessage(testMessage);\n\n      expect(mockSocket.emit).toBeCalledWith('chatMessage', testMessage);\n    });\n    it('Emits conversationAreasChanged when a conversation area is created', () => {\n      const newConvArea = townJoinResponse.interactables.find(\n        eachInteractable => isConversationArea(eachInteractable) && !eachInteractable.topic,\n      ) as ConversationAreaModel;\n      if (newConvArea) {\n        newConvArea.topic = nanoid();\n        newConvArea.occupantsByID = [townJoinResponse.userID];\n        const event = emitEventAndExpectListenerFiring(\n          'interactableUpdate',\n          newConvArea,\n          'conversationAreasChanged',\n        );\n        const changedAreasArray = event.mock.calls[0][0];\n        expect(changedAreasArray.find(eachConvArea => eachConvArea.id === newConvArea.id)?.topic);\n      } else {\n        fail('Did not find an existing, empty conversation area in the town join response');\n      }\n    });\n    describe('[T2] interactableUpdate events', () => {\n      describe('Conversation Area updates', () => {\n        function emptyConversationArea() {\n          return {\n            ...(townJoinResponse.interactables.find(\n              eachInteractable =>\n                isConversationArea(eachInteractable) && eachInteractable.occupantsByID.length == 0,\n            ) as ConversationAreaModel),\n          };\n        }\n        function occupiedConversationArea() {\n          return {\n            ...(townJoinResponse.interactables.find(\n              eachInteractable =>\n                isConversationArea(eachInteractable) && eachInteractable.occupantsByID.length > 0,\n            ) as ConversationAreaModel),\n          };\n        }\n        it('Emits a conversationAreasChanged event with the updated list of conversation areas if the area is newly occupied', () => {\n          const convArea = emptyConversationArea();\n          convArea.occupantsByID = [townJoinResponse.userID];\n          convArea.topic = nanoid();\n          const updatedConversationAreas = testController.conversationAreas;\n\n          emitEventAndExpectListenerFiring(\n            'interactableUpdate',\n            convArea,\n            'conversationAreasChanged',\n            updatedConversationAreas,\n          );\n\n          const updatedController = updatedConversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          expect(updatedController?.topic).toEqual(convArea.topic);\n          expect(updatedController?.occupants.map(eachOccupant => eachOccupant.id)).toEqual(\n            convArea.occupantsByID,\n          );\n          expect(updatedController?.toConversationAreaModel()).toEqual({\n            id: convArea.id,\n            topic: convArea.topic,\n            occupantsByID: [townJoinResponse.userID],\n          });\n        });\n        it('Emits a conversationAreasChanged event with the updated list of converation areas if the area is newly vacant', () => {\n          const convArea = occupiedConversationArea();\n          convArea.occupantsByID = [];\n          convArea.topic = undefined;\n          const updatedConversationAreas = testController.conversationAreas;\n\n          emitEventAndExpectListenerFiring(\n            'interactableUpdate',\n            convArea,\n            'conversationAreasChanged',\n            updatedConversationAreas,\n          );\n          const updatedController = updatedConversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          expect(updatedController?.topic).toEqual(convArea.topic);\n          expect(updatedController?.occupants.map(eachOccupant => eachOccupant.id)).toEqual(\n            convArea.occupantsByID,\n          );\n        });\n        it('Does not emit a conversationAreasChanged event if the set of active areas has not changed', () => {\n          const convArea = occupiedConversationArea();\n          convArea.topic = nanoid();\n          const updatedConversationAreas = testController.conversationAreas;\n\n          const eventListener = getEventListener(mockSocket, 'interactableUpdate');\n          const mockListener = jest.fn() as jest.MockedFunction<\n            TownEvents['conversationAreasChanged']\n          >;\n          testController.addListener('conversationAreasChanged', mockListener);\n          eventListener(convArea);\n          expect(mockListener).not.toBeCalled();\n\n          const updatedController = updatedConversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          expect(updatedController?.topic).toEqual(convArea.topic);\n          expect(updatedController?.occupants.map(eachOccupant => eachOccupant.id)).toEqual(\n            convArea.occupantsByID,\n          );\n        });\n        it('Emits a topicChange event if the topic of a conversation area changes', () => {\n          const convArea = occupiedConversationArea();\n          convArea.topic = nanoid();\n          //Set up a topicChange listener\n          const topicChangeListener = jest.fn();\n          const convAreaController = testController.conversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          if (!convAreaController) {\n            fail('Could not find conversation area controller');\n            return;\n          }\n          convAreaController.addListener('topicChange', topicChangeListener);\n\n          // Perform the update\n          const eventListener = getEventListener(mockSocket, 'interactableUpdate');\n          eventListener(convArea);\n\n          expect(topicChangeListener).toBeCalledWith(convArea.topic);\n        });\n        it('Does not emit a topicChange event if the topic is unchanged', () => {\n          const convArea = occupiedConversationArea();\n          //Set up a topicChange listener\n          const topicChangeListener = jest.fn();\n          const convAreaController = testController.conversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          if (!convAreaController) {\n            fail('Could not find conversation area controller');\n          }\n          convAreaController.addListener('topicChange', topicChangeListener);\n\n          // Perform the update\n          const eventListener = getEventListener(mockSocket, 'interactableUpdate');\n          eventListener(convArea);\n\n          expect(topicChangeListener).not.toBeCalled();\n        });\n        it('Emits an occupantsChange event if the occupants changed', () => {\n          const convArea = occupiedConversationArea();\n          convArea.occupantsByID = [townJoinResponse.userID, townJoinResponse.currentPlayers[1].id];\n\n          //Set up an occupantsChange listener\n          const occupantsChangeListener = jest.fn();\n          const convAreaController = testController.conversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          if (!convAreaController) {\n            fail('Could not find conversation area controller');\n          }\n          convAreaController.addListener('occupantsChange', occupantsChangeListener);\n\n          // Perform the update\n          const eventListener = getEventListener(mockSocket, 'interactableUpdate');\n          eventListener(convArea);\n\n          expect(occupantsChangeListener).toBeCalledTimes(1);\n        });\n        it('Does not emit an occupantsChange if the occupants have not changed', () => {\n          const convArea = occupiedConversationArea();\n          convArea.topic = nanoid();\n\n          //Set up an occupantsChange listener\n          const occupantsChangeListener = jest.fn();\n          const convAreaController = testController.conversationAreas.find(\n            eachArea => eachArea.id === convArea.id,\n          );\n          if (!convAreaController) {\n            fail('Could not find conversation area controller');\n          }\n          convAreaController.addListener('occupantsChange', occupantsChangeListener);\n\n          // Perform the update\n          const eventListener = getEventListener(mockSocket, 'interactableUpdate');\n          eventListener(convArea);\n\n          expect(occupantsChangeListener).not.toBeCalled();\n        });\n      });\n      describe('Viewing Area updates', () => {\n        function viewingAreaOnTown() {\n          return {\n            ...(townJoinResponse.interactables.find(eachInteractable =>\n              isViewingArea(eachInteractable),\n            ) as ViewingArea),\n          };\n        }\n        let viewingArea: ViewingArea;\n        let viewingAreaController: ViewingAreaController;\n        let eventListener: (update: ViewingArea) => void;\n        beforeEach(() => {\n          viewingArea = viewingAreaOnTown();\n          const controller = testController.viewingAreas.find(\n            eachArea => eachArea.id === viewingArea.id,\n          );\n          if (!controller) {\n            fail(`Could not find viewing area controller for viewing area ${viewingArea.id}`);\n          }\n          viewingAreaController = controller;\n          eventListener = getEventListener(mockSocket, 'interactableUpdate');\n        });\n        it('Updates the viewing area model', () => {\n          viewingArea.video = nanoid();\n          viewingArea.elapsedTimeSec++;\n          viewingArea.isPlaying = !viewingArea.isPlaying;\n\n          eventListener(viewingArea);\n\n          expect(viewingAreaController.viewingAreaModel()).toEqual(viewingArea);\n        });\n        it('Emits a playbackChange event if isPlaying changes', () => {\n          const listener = jest.fn();\n          viewingAreaController.addListener('playbackChange', listener);\n\n          viewingArea.isPlaying = !viewingArea.isPlaying;\n          eventListener(viewingArea);\n          expect(listener).toBeCalledWith(viewingArea.isPlaying);\n        });\n        it('Emits a progressChange event if the elapsedTimeSec chagnes', () => {\n          const listener = jest.fn();\n          viewingAreaController.addListener('progressChange', listener);\n\n          viewingArea.elapsedTimeSec++;\n          eventListener(viewingArea);\n          expect(listener).toBeCalledWith(viewingArea.elapsedTimeSec);\n        });\n        it('Emits a videoChange event if the video changes', () => {\n          const listener = jest.fn();\n          viewingAreaController.addListener('videoChange', listener);\n\n          viewingArea.video = nanoid();\n          eventListener(viewingArea);\n          expect(listener).toBeCalledWith(viewingArea.video);\n        });\n      });\n      describe('[REE1] PosterSessionAreaController Poster Session Area updates', () => {\n        function posterSessionAreaOnTown() {\n          return {\n            ...(townJoinResponse.interactables.find(eachInteractable =>\n              isPosterSessionArea(eachInteractable),\n            ) as PosterSessionArea),\n          };\n        }\n        let posterSessionArea: PosterSessionArea;\n        let posterSessionAreaController: PosterSessionAreaController;\n        let eventListener: (update: PosterSessionArea) => void;\n        beforeEach(() => {\n          posterSessionArea = posterSessionAreaOnTown();\n          const controller = testController.posterSessionAreas.find(\n            eachArea => eachArea.id === posterSessionArea.id,\n          );\n          if (!controller) {\n            fail(\n              `Could not find postersession area controller for poster session area ${posterSessionArea.id}`,\n            );\n          }\n          posterSessionAreaController = controller;\n          eventListener = getEventListener(mockSocket, 'interactableUpdate');\n        });\n        it('[REE1] interactableUpdate and poster hooks Updates the poster session area model', () => {\n          posterSessionArea.imageContents = nanoid();\n          posterSessionArea.stars++;\n          posterSessionArea.title = 'New Title';\n\n          eventListener(posterSessionArea);\n\n          expect(posterSessionAreaController.posterSessionAreaModel()).toEqual(posterSessionArea);\n        });\n        it('[REE1] interactableUpdate and poster hooks Emits a posterStarChange event if the number of stars changes', () => {\n          const listener = jest.fn();\n          posterSessionAreaController.addListener('posterStarChange', listener);\n\n          posterSessionArea.stars++;\n          eventListener(posterSessionArea);\n          expect(listener).toBeCalledWith(posterSessionArea.stars);\n        });\n        it('[REE1] interactableUpdate and poster hooks Emits a posterTitleEvent event if the title changes', () => {\n          const listener = jest.fn();\n          posterSessionAreaController.addListener('posterTitleChange', listener);\n\n          posterSessionArea.title = nanoid();\n          eventListener(posterSessionArea);\n          expect(listener).toBeCalledWith(posterSessionArea.title);\n        });\n        it('[REE1] interactableUpdate and poster hooks Emits a posterImageContentsChange event if the image contents changes', () => {\n          const listener = jest.fn();\n          posterSessionAreaController.addListener('posterImageContentsChange', listener);\n\n          posterSessionArea.imageContents = nanoid();\n          eventListener(posterSessionArea);\n          expect(listener).toBeCalledWith(posterSessionArea.imageContents);\n        });\n      });\n    });\n  });\n  describe('Processing events that are received over the socket from the townService', () => {\n    let testPlayer: PlayerModel;\n    let testPlayerPlayersChangedFn: jest.MockedFunction<TownEvents['playersChanged']>;\n\n    beforeEach(() => {\n      //Create a new PlayerModel\n      testPlayer = {\n        id: nanoid(),\n        location: { moving: false, rotation: 'back', x: 0, y: 1, interactableID: nanoid() },\n        userName: nanoid(),\n      };\n      //Add that player to the test town\n      testPlayerPlayersChangedFn = emitEventAndExpectListenerFiring(\n        'playerJoined',\n        testPlayer,\n        'playersChanged',\n      );\n    });\n    it('Emits playersChanged events when players join', () => {\n      expect(testPlayerPlayersChangedFn).toBeCalledWith([\n        PlayerController.fromPlayerModel(testPlayer),\n      ]);\n    });\n\n    it('Emits playersChanged events when players leave', () => {\n      emitEventAndExpectListenerFiring('playerDisconnect', testPlayer, 'playersChanged', []);\n    });\n    it('Emits playerMoved events when players join', async () => {\n      emitEventAndExpectListenerFiring(\n        'playerJoined',\n        testPlayer,\n        'playerMoved',\n        PlayerController.fromPlayerModel(testPlayer),\n      );\n    });\n    it('Emits playerMoved events when players move', async () => {\n      testPlayer.location = {\n        moving: true,\n        rotation: 'front',\n        x: 1,\n        y: 0,\n        interactableID: nanoid(),\n      };\n      emitEventAndExpectListenerFiring(\n        'playerMoved',\n        testPlayer,\n        'playerMoved',\n        PlayerController.fromPlayerModel(testPlayer),\n      );\n    });\n  });\n  it('Disconnects the socket and clears the coveyTownController when disconnection', async () => {\n    emitEventAndExpectListenerFiring('townClosing', undefined, 'disconnect');\n    expect(mockLoginController.setTownController).toBeCalledWith(null);\n  });\n});\n"},"src/hooks/hooks.test.tsx":{"tests":[{"id":"48","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Returns initial state for the town","location":{"start":{"column":6,"line":75}}},{"id":"49","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Updates players in response to playersChanged events","location":{"start":{"column":6,"line":78}}},{"id":"50","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Adds exactly one listener","location":{"start":{"column":6,"line":89}}},{"id":"51","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Removes the listener when the component is unmounted","location":{"start":{"column":6,"line":96}}},{"id":"52","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Adds a listener on first render and does not re-register a listener on each render","location":{"start":{"column":6,"line":105}}},{"id":"53","name":"[T3] TownController-Dependent Hooks [T3] usePlayers Removes the listener if the townController changes and adds one to the new controller","location":{"start":{"column":6,"line":113}}},{"id":"54","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Returns an initial state of the active conversation areas","location":{"start":{"column":6,"line":162}}},{"id":"55","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Updates its value in response to conversationAreasChanged events","location":{"start":{"column":6,"line":166}}},{"id":"56","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Only adds a listener once","location":{"start":{"column":6,"line":179}}},{"id":"57","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Removes the listener when the component is unmounted","location":{"start":{"column":6,"line":192}}},{"id":"58","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Adds a listener on first render and does not re-register a listener on each render","location":{"start":{"column":6,"line":198}}},{"id":"59","name":"[T3] TownController-Dependent Hooks [T3] useActiveConversationAreas Removes the listener if the townController changes and adds one to the new controller","location":{"start":{"column":6,"line":206}}},{"id":"60","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Returns initial state for the town","location":{"start":{"column":6,"line":242}}},{"id":"61","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Updates isPubliclyListed in response to townSettingsUpdated events","location":{"start":{"column":6,"line":246}}},{"id":"62","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Updates friendlyName in response to townSettingsUpdated events","location":{"start":{"column":6,"line":255}}},{"id":"63","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Updates both settings in response to townSettingsUpdated events","location":{"start":{"column":6,"line":264}}},{"id":"64","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Adds exactly one listener","location":{"start":{"column":6,"line":274}}},{"id":"65","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Removes the listener when the component is unmounted","location":{"start":{"column":6,"line":283}}},{"id":"66","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Adds a listener on first render and does not re-register a listener on each render","location":{"start":{"column":6,"line":294}}},{"id":"67","name":"[T3] TownController-Dependent Hooks [T3] useTownSettings Removes the listener if the townController changes and adds one to the new controller","location":{"start":{"column":6,"line":302}}},{"id":"68","name":"ConversationAreaController hooks [T3] useConversationAreaOccupants Returns an initial state of the players in the area","location":{"start":{"column":6,"line":383}}},{"id":"69","name":"ConversationAreaController hooks [T3] useConversationAreaOccupants Updates the occupants list in response to occupantsChange events","location":{"start":{"column":6,"line":386}}},{"id":"70","name":"ConversationAreaController hooks [T3] useConversationAreaOccupants Removes its update listener when the component unmounts","location":{"start":{"column":6,"line":394}}},{"id":"71","name":"ConversationAreaController hooks [T3] useConversationAreaOccupants Adds a listener on first render and does not re-register a listener on each render","location":{"start":{"column":6,"line":400}}},{"id":"72","name":"ConversationAreaController hooks [T3] useConversationAreaOccupants Removes its listener and registers a new one if the area changes","location":{"start":{"column":6,"line":407}}},{"id":"73","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Returns an initial state of the topic for the area","location":{"start":{"column":6,"line":432}}},{"id":"74","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Returns NO_TOPIC_STRING if the topic is undefined","location":{"start":{"column":6,"line":435}}},{"id":"75","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Updates the topic in response to topicChange events","location":{"start":{"column":6,"line":441}}},{"id":"76","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Removes its update listener when the component unmounts","location":{"start":{"column":6,"line":450}}},{"id":"77","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Adds a listener on first render and does not re-register a listener on each render","location":{"start":{"column":6,"line":456}}},{"id":"78","name":"ConversationAreaController hooks [T3] useConversationAreaTopic Removes its listener and registers a new one if the area changes","location":{"start":{"column":6,"line":463}}}],"source":"import { cleanup, render, RenderResult } from '@testing-library/react';\nimport { MockProxy } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport * as React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport ConversationAreaController, {\n  ConversationAreaEvents,\n  NO_TOPIC_STRING,\n  useConversationAreaOccupants,\n  useConversationAreaTopic,\n} from '../classes/ConversationAreaController';\nimport PlayerController from '../classes/PlayerController';\nimport TownController, {\n  TownEvents,\n  useActiveConversationAreas,\n  usePlayers,\n  useTownSettings,\n} from '../classes/TownController';\nimport { EventNames, getTownEventListener, mockTownController } from '../TestUtils';\nimport * as useTownController from './useTownController';\ndescribe('[T3] TownController-Dependent Hooks', () => {\n  let useTownControllerSpy: jest.SpyInstance<TownController, []>;\n  let townController: MockProxy<TownController>;\n  let players: PlayerController[];\n\n  beforeAll(() => {\n    useTownControllerSpy = jest.spyOn(useTownController, 'default');\n  });\n  function getSingleListenerRemoved<Ev extends EventNames<TownEvents>>(\n    eventName: Ev,\n  ): TownEvents[Ev] {\n    const listeners = townController.removeListener.mock.calls.filter(\n      eachCall => eachCall[0] === eventName,\n    );\n    if (listeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one removeListener call for ${eventName}, but found ${listeners.length}`,\n      );\n    }\n    return listeners[0][1] as unknown as TownEvents[Ev];\n  }\n  function getSingleListenerAdded<Ev extends EventNames<TownEvents>>(\n    eventName: Ev,\n    spy = townController.addListener,\n  ): TownEvents[Ev] {\n    const listeners = spy.mock.calls.filter(eachCall => eachCall[0] === eventName);\n    if (listeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one addListener call for ${eventName}, but found ${listeners.length}`,\n      );\n    }\n    return listeners[0][1] as unknown as TownEvents[Ev];\n  }\n  describe('[T3] usePlayers', () => {\n    let friendlyName: string;\n    let townIsPubliclyListed: boolean;\n    let hookReturnValue: PlayerController[];\n    let renderData: RenderResult;\n    function TestComponent() {\n      hookReturnValue = usePlayers();\n      return null;\n    }\n    beforeEach(() => {\n      friendlyName = nanoid();\n      townIsPubliclyListed = true;\n      townController = mockTownController({\n        friendlyName,\n        townIsPubliclyListed,\n        players,\n      });\n      useTownControllerSpy.mockReturnValue(townController);\n\n      renderData = render(<TestComponent />);\n    });\n    it('Returns initial state for the town', () => {\n      expect(hookReturnValue).toEqual(players);\n    });\n    it('Updates players in response to playersChanged events', () => {\n      const listener = getSingleListenerAdded('playersChanged');\n      act(() => {\n        listener([]);\n      });\n      expect(hookReturnValue).toEqual([]);\n      act(() => {\n        listener(players);\n      });\n      expect(hookReturnValue).toEqual(players);\n    });\n    it('Adds exactly one listener', () => {\n      const listener = getSingleListenerAdded('playersChanged');\n      act(() => {\n        listener([]);\n      });\n      getSingleListenerAdded('playersChanged');\n    });\n    it('Removes the listener when the component is unmounted', () => {\n      const listenerAdded = getSingleListenerAdded('playersChanged');\n      act(() => {\n        listenerAdded([]);\n      });\n      cleanup();\n      const listenerRemoved = getSingleListenerRemoved('playersChanged');\n      expect(listenerRemoved).toBe(listenerAdded);\n    });\n    it('Adds a listener on first render and does not re-register a listener on each render', () => {\n      getSingleListenerAdded('playersChanged');\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      getSingleListenerAdded('playersChanged');\n    });\n\n    it('Removes the listener if the townController changes and adds one to the new controller', () => {\n      const addCall = getSingleListenerAdded('playersChanged');\n      const newController = mockTownController({\n        friendlyName: nanoid(),\n        townID: nanoid(),\n        players: [],\n      });\n\n      useTownControllerSpy.mockReturnValue(newController);\n      renderData.rerender(<TestComponent />);\n      expect(getSingleListenerRemoved('playersChanged')).toBe(addCall);\n\n      getSingleListenerAdded('playersChanged', newController.addListener);\n    });\n  });\n  describe('[T3] useActiveConversationAreas', () => {\n    let conversationAreas: ConversationAreaController[];\n\n    let hookReturnValue: ConversationAreaController[] = [];\n    let renderData: RenderResult;\n\n    function TestComponent() {\n      hookReturnValue = useActiveConversationAreas();\n      return null;\n    }\n    beforeEach(() => {\n      conversationAreas = [];\n      players = [];\n\n      for (let i = 0; i < 10; i++) {\n        conversationAreas.push(new ConversationAreaController(nanoid(), `topic${i}`));\n      }\n\n      for (let i = 0; i < 10; i++) {\n        players.push(\n          new PlayerController(nanoid(), nanoid(), { moving: false, rotation: 'back', x: 0, y: 1 }),\n        );\n      }\n\n      conversationAreas[0].occupants.push(players[0]);\n      conversationAreas[1].occupants.push(players[1]);\n\n      townController = mockTownController({\n        conversationAreas,\n      });\n      useTownControllerSpy.mockReturnValue(townController);\n\n      renderData = render(<TestComponent />);\n    });\n    it('Returns an initial state of the active conversation areas', () => {\n      hookReturnValue.sort((a, b) => (a.topic && b.topic ? a.topic.localeCompare(b.topic) : 0));\n      expect(hookReturnValue).toEqual([conversationAreas[0], conversationAreas[1]]);\n    });\n    it('Updates its value in response to conversationAreasChanged events', () => {\n      act(() => {\n        const listener = getSingleListenerAdded('conversationAreasChanged');\n        conversationAreas[2].occupants.push(players[2]);\n        listener(conversationAreas);\n      });\n      hookReturnValue.sort((a, b) => (a.topic && b.topic ? a.topic.localeCompare(b.topic) : 0));\n      expect(hookReturnValue).toEqual([\n        conversationAreas[0],\n        conversationAreas[1],\n        conversationAreas[2],\n      ]);\n    });\n    it('Only adds a listener once', () => {\n      // Check that there was one listener added\n      getSingleListenerAdded('conversationAreasChanged');\n      // Trigger re-render\n      act(() => {\n        const listener = getTownEventListener(townController, 'conversationAreasChanged');\n        conversationAreas[2].occupants.push(players[2]);\n        listener(conversationAreas);\n      });\n      renderData.rerender(<TestComponent />);\n      // Should still be one\n      getSingleListenerAdded('conversationAreasChanged');\n    });\n    it('Removes the listener when the component is unmounted', () => {\n      const addCall = getSingleListenerAdded('conversationAreasChanged');\n      cleanup();\n      const removeCall = getSingleListenerRemoved('conversationAreasChanged');\n      expect(addCall).toBe(removeCall);\n    });\n    it('Adds a listener on first render and does not re-register a listener on each render', () => {\n      getSingleListenerAdded('conversationAreasChanged');\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      getSingleListenerAdded('conversationAreasChanged');\n    });\n\n    it('Removes the listener if the townController changes and adds one to the new controller', () => {\n      const addCall = getSingleListenerAdded('conversationAreasChanged');\n      const newController = mockTownController({\n        friendlyName: nanoid(),\n        townID: nanoid(),\n        conversationAreas: [],\n      });\n\n      useTownControllerSpy.mockReturnValue(newController);\n      renderData.rerender(<TestComponent />);\n      expect(getSingleListenerRemoved('conversationAreasChanged')).toBe(addCall);\n\n      getSingleListenerAdded('conversationAreasChanged', newController.addListener);\n    });\n  });\n\n  describe('[T3] useTownSettings', () => {\n    let friendlyName: string;\n    let townIsPubliclyListed: boolean;\n    let hookReturnValue: { friendlyName: string; isPubliclyListed: boolean };\n    let renderData: RenderResult;\n    function TestComponent() {\n      hookReturnValue = useTownSettings();\n      return null;\n    }\n    beforeEach(() => {\n      friendlyName = nanoid();\n      townIsPubliclyListed = true;\n      townController = mockTownController({\n        friendlyName,\n        townIsPubliclyListed,\n      });\n      useTownControllerSpy.mockReturnValue(townController);\n\n      renderData = render(<TestComponent />);\n    });\n    it('Returns initial state for the town', () => {\n      expect(hookReturnValue.isPubliclyListed).toBe(townIsPubliclyListed);\n      expect(hookReturnValue.friendlyName).toBe(friendlyName);\n    });\n    it('Updates isPubliclyListed in response to townSettingsUpdated events', () => {\n      const listener = getSingleListenerAdded('townSettingsUpdated');\n      const newTownIsPubliclyListed = false;\n      act(() => {\n        listener({ isPubliclyListed: newTownIsPubliclyListed });\n      });\n      expect(hookReturnValue.friendlyName).toBe(friendlyName);\n      expect(hookReturnValue.isPubliclyListed).toBe(newTownIsPubliclyListed);\n    });\n    it('Updates friendlyName in response to townSettingsUpdated events', () => {\n      const listener = getSingleListenerAdded('townSettingsUpdated');\n      const newFriendlyName = nanoid();\n      act(() => {\n        listener({ friendlyName: newFriendlyName });\n      });\n      expect(hookReturnValue.friendlyName).toBe(newFriendlyName);\n      expect(hookReturnValue.isPubliclyListed).toBe(townIsPubliclyListed);\n    });\n    it('Updates both settings in response to townSettingsUpdated events', () => {\n      const listener = getSingleListenerAdded('townSettingsUpdated');\n      const newFriendlyName = nanoid();\n      const newTownIsPubliclyListed = false;\n      act(() => {\n        listener({ friendlyName: newFriendlyName, isPubliclyListed: newTownIsPubliclyListed });\n      });\n      expect(hookReturnValue.friendlyName).toBe(newFriendlyName);\n      expect(hookReturnValue.isPubliclyListed).toBe(newTownIsPubliclyListed);\n    });\n    it('Adds exactly one listener', () => {\n      const listener = getSingleListenerAdded('townSettingsUpdated');\n      const newFriendlyName = nanoid();\n      const newTownIsPubliclyListed = false;\n      act(() => {\n        listener({ friendlyName: newFriendlyName, isPubliclyListed: newTownIsPubliclyListed });\n      });\n      getSingleListenerAdded('townSettingsUpdated');\n    });\n    it('Removes the listener when the component is unmounted', () => {\n      const listenerAdded = getSingleListenerAdded('townSettingsUpdated');\n      const newFriendlyName = nanoid();\n      const newTownIsPubliclyListed = false;\n      act(() => {\n        listenerAdded({ friendlyName: newFriendlyName, isPubliclyListed: newTownIsPubliclyListed });\n      });\n      cleanup();\n      const listenerRemoved = getSingleListenerRemoved('townSettingsUpdated');\n      expect(listenerRemoved).toBe(listenerAdded);\n    });\n    it('Adds a listener on first render and does not re-register a listener on each render', () => {\n      getSingleListenerAdded('townSettingsUpdated');\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      getSingleListenerAdded('townSettingsUpdated');\n    });\n\n    it('Removes the listener if the townController changes and adds one to the new controller', () => {\n      const addCall = getSingleListenerAdded('townSettingsUpdated');\n      const newController = mockTownController({\n        friendlyName: nanoid(),\n        townID: nanoid(),\n        conversationAreas: [],\n      });\n\n      useTownControllerSpy.mockReturnValue(newController);\n      renderData.rerender(<TestComponent />);\n      expect(getSingleListenerRemoved('townSettingsUpdated')).toBe(addCall);\n\n      getSingleListenerAdded('townSettingsUpdated', newController.addListener);\n    });\n  });\n});\n\ndescribe('ConversationAreaController hooks', () => {\n  let conversationAreaController: ConversationAreaController;\n  type ConversationAreaEventName = keyof ConversationAreaEvents;\n\n  let addListenerSpy: jest.SpyInstance<\n    ConversationAreaController,\n    [event: ConversationAreaEventName, listener: ConversationAreaEvents[ConversationAreaEventName]]\n  >;\n\n  let removeListenerSpy: jest.SpyInstance<\n    ConversationAreaController,\n    [event: ConversationAreaEventName, listener: ConversationAreaEvents[ConversationAreaEventName]]\n  >;\n\n  beforeEach(() => {\n    conversationAreaController = new ConversationAreaController(nanoid(), nanoid());\n    addListenerSpy = jest.spyOn(conversationAreaController, 'addListener');\n    removeListenerSpy = jest.spyOn(conversationAreaController, 'removeListener');\n  });\n  function getSingleListenerAdded<Ev extends EventNames<ConversationAreaEvents>>(\n    eventName: Ev,\n    spy = addListenerSpy,\n  ): ConversationAreaEvents[Ev] {\n    const addedListeners = spy.mock.calls.filter(eachCall => eachCall[0] === eventName);\n    if (addedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one addListener call for ${eventName} but found ${addedListeners.length}`,\n      );\n    }\n    return addedListeners[0][1] as unknown as ConversationAreaEvents[Ev];\n  }\n  function getSingleListenerRemoved<Ev extends EventNames<ConversationAreaEvents>>(\n    eventName: Ev,\n  ): ConversationAreaEvents[Ev] {\n    const removedListeners = removeListenerSpy.mock.calls.filter(\n      eachCall => eachCall[0] === eventName,\n    );\n    if (removedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one removeListeners call for ${eventName} but found ${removedListeners.length}`,\n      );\n    }\n    return removedListeners[0][1] as unknown as ConversationAreaEvents[Ev];\n  }\n  describe('[T3] useConversationAreaOccupants', () => {\n    let hookReturnValue: PlayerController[];\n    let testPlayers: PlayerController[];\n    let renderData: RenderResult;\n    function TestComponent(props: { controller?: ConversationAreaController }) {\n      hookReturnValue = useConversationAreaOccupants(\n        props.controller || conversationAreaController,\n      );\n      return null;\n    }\n    beforeEach(() => {\n      testPlayers = [];\n      for (let i = 0; i < 10; i++) {\n        testPlayers.push(\n          new PlayerController(nanoid(), nanoid(), { moving: false, rotation: 'back', x: 0, y: 1 }),\n        );\n      }\n      conversationAreaController.occupants = [testPlayers[0], testPlayers[1], testPlayers[2]];\n      renderData = render(<TestComponent />);\n    });\n    it('Returns an initial state of the players in the area', () => {\n      expect(hookReturnValue).toEqual([testPlayers[0], testPlayers[1], testPlayers[2]]);\n    });\n    it('Updates the occupants list in response to occupantsChange events', () => {\n      act(() => {\n        conversationAreaController.occupants = [testPlayers[0]];\n      });\n      expect(hookReturnValue).toEqual([testPlayers[0]]);\n      //Make sure that re-rendering didn't add another listener\n      getSingleListenerAdded('occupantsChange');\n    });\n    it('Removes its update listener when the component unmounts', () => {\n      const listenerAdded = getSingleListenerAdded('occupantsChange');\n      cleanup();\n      const listenerRemoved = getSingleListenerRemoved('occupantsChange');\n      expect(listenerAdded).toBe(listenerRemoved);\n    });\n    it('Adds a listener on first render and does not re-register a listener on each render', () => {\n      getSingleListenerAdded('occupantsChange');\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      getSingleListenerAdded('occupantsChange');\n    });\n    it('Removes its listener and registers a new one if the area changes', () => {\n      const added = getSingleListenerAdded('occupantsChange');\n\n      const newController = new ConversationAreaController(nanoid(), nanoid());\n      const newAdded = jest.spyOn(newController, 'addListener');\n\n      renderData.rerender(<TestComponent controller={newController} />);\n\n      //Make sure old was removed\n      expect(getSingleListenerRemoved('occupantsChange')).toBe(added);\n\n      //Make sure new added\n      getSingleListenerAdded('occupantsChange', newAdded);\n    });\n  });\n  describe('[T3] useConversationAreaTopic', () => {\n    let hookReturnValue: string;\n    let renderData: RenderResult;\n    function TestComponent(props: { controller?: ConversationAreaController }) {\n      hookReturnValue = useConversationAreaTopic(props.controller || conversationAreaController);\n      return null;\n    }\n    beforeEach(() => {\n      renderData = render(<TestComponent />);\n    });\n    it('Returns an initial state of the topic for the area', () => {\n      expect(hookReturnValue).toEqual(conversationAreaController.topic);\n    });\n    it('Returns NO_TOPIC_STRING if the topic is undefined', () => {\n      act(() => {\n        conversationAreaController.topic = undefined;\n      });\n      expect(hookReturnValue).toEqual(NO_TOPIC_STRING);\n    });\n    it('Updates the topic in response to topicChange events', () => {\n      const newTopic = nanoid();\n      act(() => {\n        conversationAreaController.topic = newTopic;\n      });\n      expect(hookReturnValue).toEqual(newTopic);\n      // Make sure that re-rendering didn't add another listener\n      getSingleListenerAdded('topicChange');\n    });\n    it('Removes its update listener when the component unmounts', () => {\n      const listenerAdded = getSingleListenerAdded('topicChange');\n      cleanup();\n      const listenerRemoved = getSingleListenerRemoved('topicChange');\n      expect(listenerRemoved).toBe(listenerAdded);\n    });\n    it('Adds a listener on first render and does not re-register a listener on each render', () => {\n      getSingleListenerAdded('topicChange');\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      renderData.rerender(<TestComponent />);\n      getSingleListenerAdded('topicChange');\n    });\n    it('Removes its listener and registers a new one if the area changes', () => {\n      const added = getSingleListenerAdded('topicChange');\n\n      const newController = new ConversationAreaController(nanoid(), nanoid());\n      const newAdded = jest.spyOn(newController, 'addListener');\n\n      renderData.rerender(<TestComponent controller={newController} />);\n\n      //Make sure old was removed\n      expect(getSingleListenerRemoved('topicChange')).toBe(added);\n\n      //Make sure new added\n      getSingleListenerAdded('topicChange', newAdded);\n    });\n  });\n});\n"},"src/components/Town/interactables/ViewingAreaVideo.test.tsx":{"tests":[{"id":"79","name":"[T4] Viewing Area Video [T4] ReactPlayer rendering Sets the videoURL","location":{"start":{"column":6,"line":165}}},{"id":"80","name":"[T4] Viewing Area Video [T4] ReactPlayer rendering Sets the playing property","location":{"start":{"column":6,"line":169}}},{"id":"81","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Registering ViewingAreaController listeners When rendered Registers exactly one progressChange listener","location":{"start":{"column":10,"line":177}}},{"id":"82","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Registering ViewingAreaController listeners When rendered Removes the progressChange listener at unmount","location":{"start":{"column":10,"line":189}}},{"id":"83","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Registering ViewingAreaController listeners When rendered Registers exactly one playbackChange listener","location":{"start":{"column":10,"line":197}}},{"id":"84","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Registering ViewingAreaController listeners When rendered Removes the playbackChange listener at unmount","location":{"start":{"column":10,"line":212}}},{"id":"85","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Registering ViewingAreaController listeners When re-rendered with a different viewing area controller Removes the listeners on the old viewing area controller and adds listeners to the new controller","location":{"start":{"column":10,"line":222}}},{"id":"86","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Pauses the video on playbackChange","location":{"start":{"column":6,"line":243}}},{"id":"87","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Unpauses the video on playbackChange","location":{"start":{"column":6,"line":252}}},{"id":"88","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Seeks the video when the drift is more than ALLOWED_DRIFT","location":{"start":{"column":6,"line":267}}},{"id":"89","name":"[T4] Viewing Area Video [T4] Bridging events from the ViewingAreaController to the ReactPlayer Does not seek the video if the drift is less than ALLOWED_DRIFT","location":{"start":{"column":6,"line":280}}},{"id":"90","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController Registers listeners for onProgress, onPlay, onPause, and onEnded","location":{"start":{"column":6,"line":289}}},{"id":"91","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController updates the viewing area controller's model and emits an update to the town onPlay","location":{"start":{"column":6,"line":296}}},{"id":"92","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController updates the viewing area controller's model and emits an update to the town onPause","location":{"start":{"column":6,"line":311}}},{"id":"93","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController updates the viewing area controller's model and emits an update to the town onEnded","location":{"start":{"column":6,"line":320}}},{"id":"94","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController updates the viewing area controller's model and emits an update to the town onProgress","location":{"start":{"column":6,"line":329}}},{"id":"95","name":"[T4] Viewing Area Video [T4] Bridging events from the ReactPlayer to the ViewingAreaController does not emit an update to the town for onPlay, onPause, onEnded or onProgress if the new state matches the existing state of the controller","location":{"start":{"column":6,"line":340}}}],"source":"import { ChakraProvider } from '@chakra-ui/react';\nimport { EventNames } from '@socket.io/component-emitter';\nimport { cleanup, render, RenderResult } from '@testing-library/react';\nimport { mock, MockProxy } from 'jest-mock-extended';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport * as ReactPlayer from 'react-player';\nimport TownController from '../../../classes/TownController';\nimport ViewingAreaController, { ViewingAreaEvents } from '../../../classes/ViewingAreaController';\nimport TownControllerContext from '../../../contexts/TownControllerContext';\nimport { ViewingAreaVideo } from './ViewingAreaVideo';\n\n// A sentinel value that we will render in the mock react player component to help find it in the DOM tree\nconst MOCK_REACT_PLAYER_PLACEHOLDER = 'MOCK_REACT_PLAYER_PLACEHOLER';\n// Mocking a React class-based component appears to be quite challenging; we define our own class\n// to use as a mock here. Using jest-mock-extended's mock<ReactPlayer>() doesn't work.\nclass MockReactPlayer extends React.Component {\n  private _componentDidUpdateSpy: jest.Mock<never, [ReactPlayer.ReactPlayerProps]>;\n\n  private _seekSpy: jest.Mock<never, [number]>;\n\n  public currentTime = 0;\n\n  constructor(\n    props: ReactPlayer.ReactPlayerProps,\n    componentDidUpdateSpy: jest.Mock<never, [ReactPlayer.ReactPlayerProps]>,\n    seekSpy: jest.Mock<never, [number]>,\n  ) {\n    super(props);\n    this._componentDidUpdateSpy = componentDidUpdateSpy;\n    this._seekSpy = seekSpy;\n  }\n\n  getCurrentTime() {\n    return this.currentTime;\n  }\n\n  seekTo(newTime: number) {\n    this.currentTime = newTime;\n    this._seekSpy(newTime);\n  }\n\n  componentDidUpdate(): void {\n    this._componentDidUpdateSpy(this.props);\n  }\n\n  render(): React.ReactNode {\n    return <>{MOCK_REACT_PLAYER_PLACEHOLDER}</>;\n  }\n}\n\nconst reactPlayerSpy = jest.spyOn(ReactPlayer, 'default');\n// This TS ignore is necessary in order to spy on a react class based component, apparently...\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nreactPlayerSpy.prototype = React.Component.prototype;\n\nfunction renderViewingArea(viewingArea: ViewingAreaController, controller: TownController) {\n  return (\n    <ChakraProvider>\n      <TownControllerContext.Provider value={controller}>\n        <ViewingAreaVideo controller={viewingArea} />\n      </TownControllerContext.Provider>\n    </ChakraProvider>\n  );\n}\n\ndescribe('[T4] Viewing Area Video', () => {\n  const mockReactPlayerConstructor = jest.fn<never, [ReactPlayer.ReactPlayerProps]>();\n  const componentDidUpdateSpy = jest.fn<never, [ReactPlayer.ReactPlayerProps]>();\n  const seekSpy = jest.fn<never, [number]>();\n  let mockReactPlayer: MockReactPlayer;\n  let viewingArea: ViewingAreaController;\n  type ViewingAreaEventName = keyof ViewingAreaEvents;\n  let addListenerSpy: jest.SpyInstance<\n    ViewingAreaController,\n    [event: ViewingAreaEventName, listener: ViewingAreaEvents[ViewingAreaEventName]]\n  >;\n\n  let removeListenerSpy: jest.SpyInstance<\n    ViewingAreaController,\n    [event: ViewingAreaEventName, listener: ViewingAreaEvents[ViewingAreaEventName]]\n  >;\n\n  let townController: MockProxy<TownController>;\n\n  let renderData: RenderResult;\n  beforeAll(() => {\n    reactPlayerSpy.mockImplementation(function (props) {\n      mockReactPlayerConstructor(props);\n      const ret = new MockReactPlayer(props, componentDidUpdateSpy, seekSpy);\n      mockReactPlayer = ret;\n      return ret as any;\n    });\n  });\n  beforeEach(() => {\n    mockReactPlayerConstructor.mockClear();\n    componentDidUpdateSpy.mockClear();\n    seekSpy.mockClear();\n    townController = mock<TownController>();\n    viewingArea = new ViewingAreaController({\n      elapsedTimeSec: 0,\n      id: 'test',\n      isPlaying: true,\n      video: 'test',\n    });\n\n    addListenerSpy = jest.spyOn(viewingArea, 'addListener');\n    removeListenerSpy = jest.spyOn(viewingArea, 'removeListener');\n\n    renderData = render(renderViewingArea(viewingArea, townController));\n  });\n  /**\n   * Retrieve the properties passed to the ReactPlayer the first time it was rendered\n   */\n  function firstReactPlayerConstructorProps() {\n    return mockReactPlayerConstructor.mock.calls[0][0];\n  }\n  /**\n   * Retrieve the properties passed to the ReactPlayer the last time it was rendered\n   */\n  function lastReactPlayerPropUpdate() {\n    return componentDidUpdateSpy.mock.calls[componentDidUpdateSpy.mock.calls.length - 1][0];\n  }\n  /**\n   * Retrieve the playback time that was passed to 'seek' in its most recent call\n   */\n  function lastSeekCall() {\n    return seekSpy.mock.calls[seekSpy.mock.calls.length - 1][0];\n  }\n  /**\n   * Retrieve the listener passed to \"addListener\" for a given eventName\n   * @throws Error if the addListener method was not invoked exactly once for the given eventName\n   */\n  function getSingleListenerAdded<Ev extends EventNames<ViewingAreaEvents>>(\n    eventName: Ev,\n    spy = addListenerSpy,\n  ): ViewingAreaEvents[Ev] {\n    const addedListeners = spy.mock.calls.filter(eachCall => eachCall[0] === eventName);\n    if (addedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one addListener call for ${eventName} but found ${addedListeners.length}`,\n      );\n    }\n    return addedListeners[0][1] as unknown as ViewingAreaEvents[Ev];\n  }\n  /**\n   * Retrieve the listener pased to \"removeListener\" for a given eventName\n   * @throws Error if the removeListener method was not invoked exactly once for the given eventName\n   */\n  function getSingleListenerRemoved<Ev extends EventNames<ViewingAreaEvents>>(\n    eventName: Ev,\n  ): ViewingAreaEvents[Ev] {\n    const removedListeners = removeListenerSpy.mock.calls.filter(\n      eachCall => eachCall[0] === eventName,\n    );\n    if (removedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one removeListeners call for ${eventName} but found ${removedListeners.length}`,\n      );\n    }\n    return removedListeners[0][1] as unknown as ViewingAreaEvents[Ev];\n  }\n  describe('[T4] ReactPlayer rendering', () => {\n    it('Sets the videoURL', () => {\n      const props = firstReactPlayerConstructorProps();\n      expect(props.url).toEqual(viewingArea.video);\n    });\n    it('Sets the playing property', () => {\n      const props = firstReactPlayerConstructorProps();\n      expect(props.playing).toEqual(viewingArea.isPlaying);\n    });\n  });\n  describe('[T4] Bridging events from the ViewingAreaController to the ReactPlayer', () => {\n    describe('Registering ViewingAreaController listeners', () => {\n      describe('When rendered', () => {\n        it('Registers exactly one progressChange listener', () => {\n          act(() => {\n            viewingArea.emit('playbackChange', false);\n          });\n          act(() => {\n            viewingArea.emit('playbackChange', true);\n          });\n          act(() => {\n            viewingArea.emit('playbackChange', false);\n          });\n          getSingleListenerAdded('progressChange');\n        });\n        it('Removes the progressChange listener at unmount', () => {\n          act(() => {\n            viewingArea.emit('progressChange', 30);\n          });\n          const listenerAdded = getSingleListenerAdded('progressChange');\n          cleanup();\n          expect(getSingleListenerRemoved('progressChange')).toBe(listenerAdded);\n        });\n        it('Registers exactly one playbackChange listener', () => {\n          act(() => {\n            viewingArea.emit('playbackChange', true);\n          });\n          act(() => {\n            viewingArea.emit('playbackChange', false);\n          });\n          act(() => {\n            viewingArea.emit('playbackChange', true);\n          });\n          act(() => {\n            viewingArea.emit('playbackChange', false);\n          });\n          getSingleListenerAdded('playbackChange');\n        });\n        it('Removes the playbackChange listener at unmount', () => {\n          act(() => {\n            viewingArea.emit('playbackChange', true);\n          });\n          const listenerAdded = getSingleListenerAdded('playbackChange');\n          cleanup();\n          expect(getSingleListenerRemoved('playbackChange')).toBe(listenerAdded);\n        });\n      });\n      describe('When re-rendered with a different viewing area controller', () => {\n        it('Removes the listeners on the old viewing area controller and adds listeners to the new controller', () => {\n          const origPlayback = getSingleListenerAdded('playbackChange');\n          const origProgress = getSingleListenerAdded('progressChange');\n\n          const newViewingArea = new ViewingAreaController({\n            elapsedTimeSec: 0,\n            id: 'test',\n            isPlaying: true,\n            video: 'test',\n          });\n          const newAddListenerSpy = jest.spyOn(newViewingArea, 'addListener');\n          renderData.rerender(renderViewingArea(newViewingArea, townController));\n\n          expect(getSingleListenerRemoved('playbackChange')).toBe(origPlayback);\n          expect(getSingleListenerRemoved('progressChange')).toBe(origProgress);\n\n          getSingleListenerAdded('playbackChange', newAddListenerSpy);\n          getSingleListenerAdded('progressChange', newAddListenerSpy);\n        });\n      });\n    });\n    it('Pauses the video on playbackChange', async () => {\n      expect(viewingArea.isPlaying).toBe(true);\n      expect(componentDidUpdateSpy).not.toBeCalled();\n      act(() => {\n        viewingArea.emit('playbackChange', false);\n      });\n      const newProps = lastReactPlayerPropUpdate();\n      expect(newProps.playing).toBe(false);\n    });\n    it('Unpauses the video on playbackChange', () => {\n      expect(viewingArea.isPlaying).toBe(true);\n      expect(componentDidUpdateSpy).not.toBeCalled();\n      act(() => {\n        viewingArea.emit('playbackChange', false);\n      });\n      let newProps = lastReactPlayerPropUpdate();\n      expect(newProps.playing).toBe(false);\n\n      act(() => {\n        viewingArea.emit('playbackChange', true);\n      });\n      newProps = lastReactPlayerPropUpdate();\n      expect(newProps.playing).toBe(true);\n    });\n    it('Seeks the video when the drift is more than ALLOWED_DRIFT', () => {\n      mockReactPlayer.currentTime = 10;\n      act(() => {\n        viewingArea.emit('progressChange', 13.01);\n      });\n      expect(lastSeekCall()).toEqual(13.01);\n\n      mockReactPlayer.currentTime = 10;\n      act(() => {\n        viewingArea.emit('progressChange', 6.99);\n      });\n      expect(lastSeekCall()).toEqual(6.99);\n    });\n    it('Does not seek the video if the drift is less than ALLOWED_DRIFT', () => {\n      mockReactPlayer.currentTime = 10;\n      act(() => {\n        viewingArea.emit('progressChange', 13);\n      });\n      expect(seekSpy).not.toBeCalled();\n    });\n  });\n  describe('[T4] Bridging events from the ReactPlayer to the ViewingAreaController', () => {\n    it('Registers listeners for onProgress, onPlay, onPause, and onEnded', () => {\n      const props = firstReactPlayerConstructorProps();\n      expect(props.onPlay).toBeDefined();\n      expect(props.onPause).toBeDefined();\n      expect(props.onEnded).toBeDefined();\n      expect(props.onProgress).toBeDefined();\n    });\n    it(\"updates the viewing area controller's model and emits an update to the town onPlay\", () => {\n      const { onPlay } = firstReactPlayerConstructorProps();\n      expect(viewingArea.isPlaying).toBe(true);\n      act(() => {\n        viewingArea.isPlaying = false;\n      });\n      act(() => {\n        if (onPlay) {\n          onPlay();\n        }\n      });\n      expect(viewingArea.isPlaying).toBe(true);\n      expect(townController.emitViewingAreaUpdate).toBeCalledWith(viewingArea);\n    });\n\n    it(\"updates the viewing area controller's model and emits an update to the town onPause\", () => {\n      const { onPause } = firstReactPlayerConstructorProps();\n      expect(viewingArea.isPlaying).toBe(true);\n      act(() => {\n        if (onPause) onPause();\n      });\n      expect(viewingArea.isPlaying).toBe(false);\n      expect(townController.emitViewingAreaUpdate).toBeCalledWith(viewingArea);\n    });\n    it(\"updates the viewing area controller's model and emits an update to the town onEnded\", () => {\n      const { onEnded } = firstReactPlayerConstructorProps();\n      expect(viewingArea.isPlaying).toBe(true);\n      act(() => {\n        if (onEnded) onEnded();\n      });\n      expect(viewingArea.isPlaying).toBe(false);\n      expect(townController.emitViewingAreaUpdate).toBeCalledWith(viewingArea);\n    });\n    it(\"updates the viewing area controller's model and emits an update to the town onProgress\", () => {\n      const { onProgress } = firstReactPlayerConstructorProps();\n      expect(viewingArea.isPlaying).toBe(true);\n      const newElapsedTimeSec = 10;\n      act(() => {\n        if (onProgress)\n          onProgress({ loaded: 0, playedSeconds: newElapsedTimeSec, loadedSeconds: 0, played: 0 });\n      });\n      expect(viewingArea.elapsedTimeSec).toBe(newElapsedTimeSec);\n      expect(townController.emitViewingAreaUpdate).toBeCalledWith(viewingArea);\n    });\n    it('does not emit an update to the town for onPlay, onPause, onEnded or onProgress if the new state matches the existing state of the controller', () => {\n      const { onPlay, onProgress, onEnded, onPause } = firstReactPlayerConstructorProps();\n      if (!onPlay) {\n        fail('Unable to find an onPlay handler');\n      }\n      if (!onProgress) {\n        fail('Unable to find an onProgress handler');\n      }\n      if (!onEnded) {\n        fail('Unable to find an onEnded handler');\n      }\n      if (!onPause) {\n        fail('Unable to find an onPause handler');\n      }\n\n      act(() => {\n        viewingArea.isPlaying = true;\n      });\n      onPlay();\n      expect(townController.emitViewingAreaUpdate).not.toBeCalled();\n\n      act(() => {\n        viewingArea.elapsedTimeSec = 100;\n      });\n      onProgress({ playedSeconds: 100, loaded: 0, loadedSeconds: 0, played: 0 });\n      expect(townController.emitViewingAreaUpdate).not.toBeCalled();\n\n      act(() => {\n        viewingArea.isPlaying = false;\n      });\n      onPause();\n      expect(townController.emitViewingAreaUpdate).not.toBeCalled();\n\n      act(() => {\n        viewingArea.isPlaying = false;\n      });\n      onEnded();\n      expect(townController.emitViewingAreaUpdate).not.toBeCalled();\n    });\n  });\n});\n"},"src/components/SocialSidebar/ConversationAreasList.test.tsx":{"tests":[{"id":"96","name":"ConversationAreasList When there are inactive conversation areas Does not display inactive areas","location":{"start":{"column":6,"line":190}}},{"id":"97","name":"ConversationAreasList When there are inactive conversation areas Displays the text \"No active conversation areas\" when none are active","location":{"start":{"column":6,"line":200}}},{"id":"98","name":"ConversationAreasList When there are inactive conversation areas Shows \"No active conversation areas\" when there are no conversation areas","location":{"start":{"column":6,"line":208}}},{"id":"99","name":"ConversationAreasList When there are active conversation areas Renders the topic and label","location":{"start":{"column":6,"line":214}}},{"id":"100","name":"ConversationAreasList When there are active conversation areas Sorts the conversation areas by label, ascending","location":{"start":{"column":6,"line":219}}},{"id":"101","name":"ConversationAreasList When there are active conversation areas Displays player names in the order provided","location":{"start":{"column":6,"line":224}}},{"id":"102","name":"ConversationAreasList When there are active conversation areas Updates the occupants list when they change","location":{"start":{"column":6,"line":233}}},{"id":"103","name":"ConversationAreasList When there are active conversation areas Updates the topic when it changes","location":{"start":{"column":6,"line":246}}},{"id":"104","name":"ConversationAreasList Updating the list of conversation areas Updates the list when one is destroyed","location":{"start":{"column":6,"line":260}}},{"id":"105","name":"ConversationAreasList Updating the list of conversation areas Updates the list when one is created","location":{"start":{"column":6,"line":275}}}],"source":"import { ChakraProvider } from '@chakra-ui/react';\nimport '@testing-library/jest-dom';\nimport { findAllByRole, render, RenderResult, waitFor } from '@testing-library/react';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport ConversationAreaController from '../../classes/ConversationAreaController';\nimport PlayerController from '../../classes/PlayerController';\nimport ConversationAreasList from './ConversationAreasList';\nimport TownController from '../../classes/TownController';\nimport { LoginController } from '../../contexts/LoginControllerContext';\nimport { mock, mockClear } from 'jest-mock-extended';\nimport { BoundingBox, CoveyTownSocket } from '../../types/CoveyTownSocket';\nimport { getEventListener, mockTownControllerConnection } from '../../TestUtils';\nimport TownControllerContext from '../../contexts/TownControllerContext';\n\n/**\n * Mocks the socket-io client constructor such that it will always return the same\n * mockSocket instance. Returns that mockSocket instance to the caller of this function,\n * allowing tests to make assertions about the messages emitted to the socket, and also to\n * simulate the receipt of events, @see getEventListener\n */\nconst mockSocket = mock<CoveyTownSocket>();\njest.mock('socket.io-client', () => {\n  const actual = jest.requireActual('socket.io-client');\n  return {\n    ...actual,\n    io: () => mockSocket,\n  };\n});\n\nfunction createConversationForTesting(params?: {\n  label?: string;\n  boundingBox?: BoundingBox;\n  occupants?: PlayerController[];\n  emptyTopic?: boolean;\n}): ConversationAreaController {\n  const area = new ConversationAreaController(\n    params?.label || nanoid(),\n    params?.emptyTopic ? undefined : nanoid(),\n  );\n  if (params?.occupants) {\n    area.occupants = params?.occupants;\n  }\n  return area;\n}\n\nprocess.env.REACT_APP_TOWNS_SERVICE_URL = 'testing';\n\ndescribe('ConversationAreasList', () => {\n  /**\n   * Check that the conversation areas rendered precisely follow the specification for formatting,\n   * and that each area has the correct topic and players.\n   */\n  const expectProperlyRenderedConversationAreas = async (\n    renderData: RenderResult,\n    areas: ConversationAreaController[],\n    players?: PlayerController[][],\n  ) => {\n    if (areas.length === 0) {\n      const expectedText = await renderData.findByText('No active conversation areas');\n      expect(expectedText).toBeDefined();\n      const areaLabels = renderData.queryAllByRole('heading', { level: 3 });\n      expect(areaLabels.length).toBe(0);\n    } else {\n      const areaLabels = await renderData.findAllByRole('heading', { level: 3 });\n      expect(areaLabels.length).toBe(areas.length);\n      areas.sort((a1, a2) =>\n        a1.id.localeCompare(a2.id, undefined, { numeric: true, sensitivity: 'base' }),\n      );\n      for (let i = 0; i < areas.length; i += 1) {\n        expect(areaLabels[i]).toHaveTextContent(`${areas[i].id}: ${areas[i].topic}`);\n        if (players) {\n          const { parentElement } = areaLabels[i];\n          expect(parentElement).toBeDefined();\n          if (parentElement) {\n            const playerNodes = await findAllByRole(parentElement, 'listitem');\n            const playerNames = playerNodes.map(node => node.textContent);\n            const expectedNames = players[i].map(player => player.userName);\n            expect(playerNames).toEqual(expectedNames);\n            const localExpect = expect; // lint fire :(\n            playerNodes.forEach(playerNode => {\n              const listContainer = playerNode.parentElement;\n              if (listContainer) {\n                localExpect(listContainer.nodeName).toBe('UL'); // list items expected to be directly nested in an unordered list\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n\n  let consoleErrorSpy: jest.SpyInstance<void, [message?: any, ...optionalParms: any[]]>;\n  let testController: TownController;\n\n  beforeAll(() => {\n    // Spy on console.error and intercept react key warnings to fail test\n    consoleErrorSpy = jest.spyOn(global.console, 'error');\n    consoleErrorSpy.mockImplementation((message?, ...optionalParams) => {\n      const stringMessage = message as string;\n      if (stringMessage.includes && stringMessage.includes('children with the same key,')) {\n        throw new Error(stringMessage.replace('%s', optionalParams[0]));\n      } else if (stringMessage.includes && stringMessage.includes('warning-keys')) {\n        throw new Error(stringMessage.replace('%s', optionalParams[0]));\n      }\n      // eslint-disable-next-line no-console -- we are wrapping the console with a spy to find react warnings\n      console.warn(message, ...optionalParams);\n    });\n  });\n  afterAll(() => {\n    consoleErrorSpy.mockRestore();\n  });\n  let playersByArea: PlayerController[][] = [];\n  let areas: ConversationAreaController[] = [];\n  let renderConversationAreaList: (\n    expectedAreas?: ConversationAreaController[],\n  ) => Promise<RenderResult>;\n\n  const numAreas = 20;\n  const numPlayersPerArea = 5;\n\n  beforeEach(async () => {\n    mockClear(mockSocket); //Be sure to clear the past calls, otherwise we'll have test order dependencies\n\n    //Build up some default testing data\n    playersByArea = [];\n    areas = [];\n    let allPlayers: PlayerController[] = [];\n    for (let areaID = 0; areaID < numAreas; areaID += 1) {\n      const playersInThisArea: PlayerController[] = [];\n      for (let playerNum = 0; playerNum < numPlayersPerArea; playerNum += 1) {\n        playersInThisArea.push(\n          new PlayerController(\n            `area${areaID}.${playerNum}playerID:${nanoid()}`,\n            `area${areaID}.${playerNum}userName:${nanoid()}`,\n            {\n              x: 0,\n              y: 0,\n              interactableID: nanoid(), // should not be checked by conversation area list\n              rotation: 'front',\n              moving: false,\n            },\n          ),\n        );\n      }\n      allPlayers = allPlayers.concat(playersInThisArea);\n      playersByArea.push(playersInThisArea);\n      const area = createConversationForTesting({\n        label: `areaLabel${areaID}`,\n        occupants: playersInThisArea,\n      });\n      areas.push(area);\n    }\n    /**\n     * Renders a conversation area list component, providing the testController as the\n     * TownController, which will allow us to integration test behaviors that include\n     * the TownController and the React hooks + components.\n     */\n    renderConversationAreaList = async (areasToRender?: ConversationAreaController[]) => {\n      testController = new TownController({\n        userName: nanoid(),\n        townID: nanoid(),\n        loginController: mock<LoginController>(),\n      });\n      if (areasToRender === undefined) {\n        areasToRender = areas;\n      }\n      await mockTownControllerConnection(testController, mockSocket, {\n        interactables: areasToRender.map(eachArea => eachArea.toConversationAreaModel()),\n        currentPlayers: allPlayers.map(eachPlayer => eachPlayer.toPlayerModel()),\n        friendlyName: nanoid(),\n        isPubliclyListed: true,\n        providerVideoToken: nanoid(),\n        sessionToken: nanoid(),\n        userID: nanoid(),\n      });\n      return render(\n        <ChakraProvider>\n          <React.StrictMode>\n            <TownControllerContext.Provider value={testController}>\n              <ConversationAreasList />\n            </TownControllerContext.Provider>\n          </React.StrictMode>\n        </ChakraProvider>,\n      );\n    };\n  });\n  describe('When there are inactive conversation areas', () => {\n    it('Does not display inactive areas', async () => {\n      const activeAndInactiveAreas = [\n        createConversationForTesting({ emptyTopic: true }),\n        areas[0],\n        createConversationForTesting({ emptyTopic: true }),\n        areas[1],\n      ];\n      const renderData = await renderConversationAreaList(activeAndInactiveAreas);\n      await expectProperlyRenderedConversationAreas(renderData, [areas[0], areas[1]]);\n    });\n    it('Displays the text \"No active conversation areas\" when none are active', async () => {\n      const inactiveAreas = [\n        createConversationForTesting({ emptyTopic: true }),\n        createConversationForTesting({ emptyTopic: true }),\n      ];\n      const renderData = await renderConversationAreaList(inactiveAreas);\n      await expectProperlyRenderedConversationAreas(renderData, []);\n    });\n    it('Shows \"No active conversation areas\" when there are no conversation areas', async () => {\n      const renderData = await renderConversationAreaList([]);\n      await expectProperlyRenderedConversationAreas(renderData, []);\n    });\n  });\n  describe('When there are active conversation areas', () => {\n    it('Renders the topic and label', async () => {\n      const areasProvidedInSortOrder = areas;\n      const renderData = await renderConversationAreaList(areasProvidedInSortOrder);\n      await expectProperlyRenderedConversationAreas(renderData, areasProvidedInSortOrder);\n    });\n    it('Sorts the conversation areas by label, ascending', async () => {\n      const shuffledAreas = areas.sort(() => 1);\n      const renderData = await renderConversationAreaList(shuffledAreas);\n      await expectProperlyRenderedConversationAreas(renderData, shuffledAreas);\n    });\n    it('Displays player names in the order provided', async () => {\n      const areasProvidedInSortOrder = areas;\n      const renderData = await renderConversationAreaList(areasProvidedInSortOrder);\n      await expectProperlyRenderedConversationAreas(\n        renderData,\n        areasProvidedInSortOrder,\n        playersByArea,\n      );\n    });\n    it('Updates the occupants list when they change', async () => {\n      const renderData = await renderConversationAreaList(areas);\n      await expectProperlyRenderedConversationAreas(renderData, areas, playersByArea);\n      const updatedAreas = testController.conversationAreas.map(eachArea => {\n        act(() => {\n          //Note: because we are triggering a useEffect, we must wrap this line in an act()\n          eachArea.occupants = eachArea.occupants.slice(1);\n        });\n        return eachArea;\n      });\n      const updatedPlayersByArea = playersByArea.map(eachArea => eachArea.slice(1));\n      await expectProperlyRenderedConversationAreas(renderData, updatedAreas, updatedPlayersByArea);\n    });\n    it('Updates the topic when it changes', async () => {\n      const renderData = await renderConversationAreaList(areas);\n      await expectProperlyRenderedConversationAreas(renderData, areas, playersByArea);\n      const updatedAreas = testController.conversationAreas.map(eachArea => {\n        act(() => {\n          //Note: because we are triggering a useEffect, we must wrap this line in an act()\n          eachArea.topic = nanoid();\n        });\n        return eachArea;\n      });\n      await expectProperlyRenderedConversationAreas(renderData, updatedAreas, playersByArea);\n    });\n  });\n  describe('Updating the list of conversation areas', () => {\n    it('Updates the list when one is destroyed', async () => {\n      const renderData = await renderConversationAreaList(areas);\n      await expectProperlyRenderedConversationAreas(renderData, areas, playersByArea);\n      const listener = getEventListener(mockSocket, 'interactableUpdate');\n\n      for (const eachArea of areas) {\n        act(() => {\n          eachArea.topic = undefined;\n          listener(eachArea.toConversationAreaModel());\n        });\n        await waitFor(() =>\n          expect(renderData.queryAllByText(eachArea.topic || 'fail', { exact: false })).toEqual([]),\n        );\n      }\n    });\n    it('Updates the list when one is created', async () => {\n      areas[0].topic = undefined;\n      const renderData = await renderConversationAreaList([areas[0]]);\n      await expectProperlyRenderedConversationAreas(renderData, [], playersByArea);\n      const listener = getEventListener(mockSocket, 'interactableUpdate');\n      const newTopic = nanoid();\n      act(() => {\n        listener({\n          id: areas[0].id,\n          occupantsByID: areas[0].occupants.map(eachOccupant => eachOccupant.id),\n          topic: newTopic,\n        });\n      });\n\n      await waitFor(() => renderData.getAllByText(newTopic, { exact: false }));\n    });\n  });\n});\n"},"src/components/Login/TownSettings.test.tsx":{"tests":[{"id":"106","name":"Town Settings Panel Loads the default form values from the current app state","location":{"start":{"column":4,"line":67}}},{"id":"107","name":"Town Settings Panel Updating a town Passes the form values to apiClient.updateTown","location":{"start":{"column":6,"line":99}}},{"id":"108","name":"Town Settings Panel Updating a town Displays a toast 'Town updated' and closes on successful update","location":{"start":{"column":6,"line":124}}},{"id":"109","name":"Town Settings Panel Updating a town Displays a toast 'Unable to update town' if an error is thrown by updateTown","location":{"start":{"column":6,"line":152}}},{"id":"110","name":"Town Settings Panel Deleting a town Passes the form values to apiClient.deleteTown","location":{"start":{"column":6,"line":184}}},{"id":"111","name":"Town Settings Panel Deleting a town Displays a toast 'Town deleted' and closes on successful update","location":{"start":{"column":6,"line":206}}},{"id":"112","name":"Town Settings Panel Deleting a town Displays a toast 'Unable to delete town' if an error is thrown by apiClient.deleteTown","location":{"start":{"column":6,"line":232}}}],"source":"import { UseDisclosureReturn, ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport '@testing-library/jest-dom';\nimport { fireEvent, render, RenderResult, waitFor } from '@testing-library/react';\nimport { nanoid } from 'nanoid';\nimport TownSettings from './TownSettings';\nimport TownController from '../../classes/TownController';\nimport { mock, mockClear, MockProxy } from 'jest-mock-extended';\nimport { mockTownController } from '../../TestUtils';\nimport TownControllerContext from '../../contexts/TownControllerContext';\n\nconst mockToast = jest.fn();\nconst mockUseDisclosure = mock<UseDisclosureReturn>();\nmockUseDisclosure.isOpen = true;\n\njest.mock('@chakra-ui/react', () => {\n  const ui = jest.requireActual('@chakra-ui/react');\n  return {\n    ...ui,\n    useToast: () => mockToast,\n    useDisclosure: () => {\n      return mockUseDisclosure;\n    },\n  };\n});\n\ndescribe('Town Settings Panel', () => {\n  let renderData: RenderResult;\n  let friendlyNameField: HTMLInputElement;\n  let passwordField: HTMLInputElement;\n  let isPublicCheck: HTMLInputElement;\n  let deleteButton: HTMLElement;\n  let updateButton: HTMLElement;\n  let mockedTownController: MockProxy<TownController>;\n\n  const openSettingsPane = async (params: {\n    friendlyName: string;\n    isPubliclyListed: boolean;\n    townID: string;\n  }) => {\n    mockedTownController = mockTownController({\n      friendlyName: params.friendlyName,\n      townID: params.townID,\n      townIsPubliclyListed: params.isPubliclyListed,\n    });\n\n    renderData = render(\n      <ChakraProvider>\n        <TownControllerContext.Provider value={mockedTownController}>\n          <TownSettings />\n        </TownControllerContext.Provider>\n      </ChakraProvider>,\n    );\n\n    await waitFor(() => renderData.getByText('Friendly Name'));\n    friendlyNameField = renderData.getByLabelText('Friendly Name') as HTMLInputElement;\n    passwordField = renderData.getByTestId('updatePassword') as HTMLInputElement;\n    isPublicCheck = renderData.getByLabelText('Publicly Listed') as HTMLInputElement;\n    deleteButton = renderData.getByTestId('deletebutton');\n    updateButton = renderData.getByTestId('updatebutton');\n  };\n\n  beforeEach(async () => {\n    mockUseDisclosure.onClose.mockReset();\n    mockClear(mockToast);\n  });\n  it('Loads the default form values from the current app state', async () => {\n    let params = {\n      friendlyName: nanoid(),\n      isPubliclyListed: true,\n      townID: nanoid(),\n    };\n    await openSettingsPane(params);\n    await waitFor(() =>\n      expect(\n        renderData.getByText(`Edit town ${params.friendlyName} (${params.townID})`),\n      ).toBeInTheDocument(),\n    );\n    await waitFor(() => expect(friendlyNameField.value).toBe(params.friendlyName));\n    await waitFor(() => expect(isPublicCheck.checked).toBe(true));\n    renderData.unmount();\n\n    params = {\n      friendlyName: nanoid(),\n      isPubliclyListed: false,\n      townID: nanoid(),\n    };\n    await openSettingsPane(params);\n    await waitFor(() =>\n      expect(\n        renderData.getByText(`Edit town ${params.friendlyName} (${params.townID})`),\n      ).toBeInTheDocument(),\n    );\n    await waitFor(() => expect(friendlyNameField.value).toBe(params.friendlyName));\n    await waitFor(() => expect(isPublicCheck.checked).toBe(false));\n    renderData.unmount();\n  }, 10000);\n  describe('Updating a town', () => {\n    it('Passes the form values to apiClient.updateTown', async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: false,\n        townID: nanoid(),\n      };\n      await openSettingsPane(params);\n\n      const coveyTownPassword = nanoid();\n      const friendlyName = nanoid();\n      fireEvent.change(friendlyNameField, { target: { value: friendlyName } });\n      await waitFor(() => expect(friendlyNameField.value).toBe(friendlyName));\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(isPublicCheck);\n      await waitFor(() => expect(isPublicCheck.checked).toBe(true));\n      fireEvent.click(updateButton);\n      await waitFor(() =>\n        expect(mockedTownController.updateTown).toBeCalledWith(coveyTownPassword, {\n          friendlyName,\n          isPubliclyListed: true,\n        }),\n      );\n      expect(mockedTownController.deleteTown).not.toBeCalled();\n    }, 10000);\n    it(\"Displays a toast 'Town updated' and closes on successful update\", async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: false,\n        townID: nanoid(),\n      };\n\n      await openSettingsPane(params);\n\n      const coveyTownPassword = nanoid();\n      const friendlyName = nanoid();\n      fireEvent.change(friendlyNameField, { target: { value: friendlyName } });\n      await waitFor(() => expect(friendlyNameField.value).toBe(friendlyName));\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(updateButton);\n\n      await waitFor(() =>\n        expect(mockToast).toBeCalledWith({\n          title: 'Town updated',\n          description: 'To see the updated town, please exit and re-join this town',\n          status: 'success',\n        }),\n      );\n      expect(mockedTownController.deleteTown).not.toBeCalled();\n\n      await waitFor(() => expect(mockUseDisclosure.onClose).toBeCalled());\n    }, 10000);\n    it(\"Displays a toast 'Unable to update town' if an error is thrown by updateTown\", async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: false,\n        townID: nanoid(),\n      };\n\n      await openSettingsPane(params);\n\n      const message = `Error${nanoid()}`;\n      mockedTownController.updateTown.mockRejectedValue(new Error(message));\n\n      const coveyTownPassword = nanoid();\n      const friendlyName = nanoid();\n      fireEvent.change(friendlyNameField, { target: { value: friendlyName } });\n      await waitFor(() => expect(friendlyNameField.value).toBe(friendlyName));\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(updateButton);\n\n      await waitFor(() =>\n        expect(mockToast).toBeCalledWith({\n          title: 'Unable to update town',\n          description: `Error: ${message}`,\n          status: 'error',\n        }),\n      );\n\n      expect(mockedTownController.deleteTown).not.toBeCalled();\n    }, 10000);\n  });\n  describe('Deleting a town', () => {\n    it('Passes the form values to apiClient.deleteTown', async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: true,\n        townID: nanoid(),\n      };\n      await openSettingsPane(params);\n\n      const coveyTownPassword = nanoid();\n      const friendlyName = nanoid();\n      fireEvent.change(friendlyNameField, { target: { value: friendlyName } });\n      await waitFor(() => expect(friendlyNameField.value).toBe(friendlyName));\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(isPublicCheck);\n      await waitFor(() => expect(isPublicCheck.checked).toBe(false));\n      fireEvent.click(deleteButton);\n      await waitFor(() =>\n        expect(mockedTownController.deleteTown).toBeCalledWith(coveyTownPassword),\n      );\n      expect(mockedTownController.updateTown).not.toBeCalled();\n    }, 10000);\n    it(\"Displays a toast 'Town deleted' and closes on successful update\", async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: true,\n        townID: nanoid(),\n      };\n\n      await openSettingsPane(params);\n\n      const coveyTownPassword = nanoid();\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(deleteButton);\n      await waitFor(() =>\n        expect(mockedTownController.deleteTown).toBeCalledWith(coveyTownPassword),\n      );\n\n      await waitFor(() =>\n        expect(mockToast).toBeCalledWith({\n          title: 'Town deleted',\n          status: 'success',\n        }),\n      );\n      expect(mockedTownController.updateTown).not.toBeCalled();\n      await waitFor(() => expect(mockUseDisclosure.onClose).toBeCalled());\n    }, 10000);\n    it(\"Displays a toast 'Unable to delete town' if an error is thrown by apiClient.deleteTown\", async () => {\n      const params = {\n        friendlyName: nanoid(),\n        isPubliclyListed: false,\n        townID: nanoid(),\n      };\n\n      await openSettingsPane(params);\n\n      const message = `Error${nanoid()}`;\n      mockedTownController.deleteTown.mockRejectedValue(new Error(message));\n\n      const coveyTownPassword = nanoid();\n      fireEvent.change(passwordField, { target: { value: coveyTownPassword } });\n      await waitFor(() => expect(passwordField.value).toBe(coveyTownPassword));\n      fireEvent.click(deleteButton);\n\n      await waitFor(() =>\n        expect(mockToast).toBeCalledWith({\n          title: 'Unable to delete town',\n          description: `Error: ${message}`,\n          status: 'error',\n        }),\n      );\n\n      expect(mockedTownController.updateTown).not.toBeCalled();\n    }, 10000);\n  });\n});\n"},"src/components/Town/interactables/PosterHooks.test.tsx":{"tests":[{"id":"113","name":"Poster Image Viewer PosterHooks [REE2] useStars Registers exactly one posterStarChange listener","location":{"start":{"column":6,"line":107}}},{"id":"114","name":"Poster Image Viewer PosterHooks [REE2] useStars Unregisters exactly the same posterStarChange listener on unmounting","location":{"start":{"column":6,"line":119}}},{"id":"115","name":"Poster Image Viewer PosterHooks [REE2] useTitle Registers exactly one posterTitleChange listener","location":{"start":{"column":6,"line":127}}},{"id":"116","name":"Poster Image Viewer PosterHooks [REE2] useTitle Unregisters exactly the same posterTitleChange listener on unmounting","location":{"start":{"column":6,"line":139}}},{"id":"117","name":"Poster Image Viewer PosterHooks [REE2] useImageContents Registers exactly one posterImageContentsChange listener","location":{"start":{"column":6,"line":147}}},{"id":"118","name":"Poster Image Viewer PosterHooks [REE2] useImageContents Unregisters exactly the same posterImageContentsChange listener on unmounting","location":{"start":{"column":6,"line":159}}},{"id":"119","name":"Poster Image Viewer PosterHooks Removes the listeners and adds new ones if the controller changes","location":{"start":{"column":6,"line":167}}}],"source":"import { ChakraProvider } from '@chakra-ui/react';\nimport { EventNames } from '@socket.io/component-emitter';\nimport { cleanup, render, RenderResult } from '@testing-library/react';\nimport { DeepMockProxy, mockClear } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport PosterSessionAreaController, {\n  PosterSessionAreaEvents,\n} from '../../../classes/PosterSessionAreaController';\nimport TownController from '../../../classes/TownController';\nimport TownControllerContext from '../../../contexts/TownControllerContext';\nimport { mockTownController } from '../../../TestUtils';\nimport { PosterImage } from './PosterViewer';\n\nfunction renderPosterSessionArea(\n  posterSessionArea: PosterSessionAreaController,\n  townController: TownController,\n) {\n  let selectIsOpen = posterSessionArea.imageContents === undefined;\n  const close = () => {\n    selectIsOpen = false;\n  };\n  return (\n    <ChakraProvider>\n      <TownControllerContext.Provider value={townController}>\n        <PosterImage controller={posterSessionArea} isOpen={!selectIsOpen} close={close} />\n      </TownControllerContext.Provider>\n    </ChakraProvider>\n  );\n}\n\ndescribe('Poster Image Viewer', () => {\n  const mockToast = jest.fn();\n  let posterSessionArea: PosterSessionAreaController;\n  type PosterSessionAreaEventName = keyof PosterSessionAreaEvents;\n  let addListenerSpy: jest.SpyInstance<\n    PosterSessionAreaController,\n    [\n      event: PosterSessionAreaEventName,\n      listener: PosterSessionAreaEvents[PosterSessionAreaEventName],\n    ]\n  >;\n\n  let removeListenerSpy: jest.SpyInstance<\n    PosterSessionAreaController,\n    [\n      event: PosterSessionAreaEventName,\n      listener: PosterSessionAreaEvents[PosterSessionAreaEventName],\n    ]\n  >;\n\n  let townController: DeepMockProxy<TownController>;\n\n  let renderData: RenderResult;\n  beforeEach(() => {\n    mockClear(mockToast);\n    posterSessionArea = new PosterSessionAreaController({\n      id: `id-${nanoid()}`,\n      title: `title-${nanoid()}`,\n      imageContents: `contents-${nanoid()}`,\n      stars: 134,\n    });\n    townController = mockTownController({ posterSessionAreas: [posterSessionArea] });\n\n    addListenerSpy = jest.spyOn(posterSessionArea, 'addListener');\n    removeListenerSpy = jest.spyOn(posterSessionArea, 'removeListener');\n\n    renderData = render(renderPosterSessionArea(posterSessionArea, townController));\n  });\n\n  /**\n   * Retrieve the listener passed to \"addListener\" for a given eventName\n   * @throws Error if the addListener method was not invoked exactly once for the given eventName\n   */\n  function getSingleListenerAdded<Ev extends EventNames<PosterSessionAreaEvents>>(\n    eventName: Ev,\n    spy = addListenerSpy,\n  ): PosterSessionAreaEvents[Ev] {\n    const addedListeners = spy.mock.calls.filter(eachCall => eachCall[0] === eventName);\n    if (addedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one addListener call for ${eventName} but found ${addedListeners.length}`,\n      );\n    }\n    return addedListeners[0][1] as unknown as PosterSessionAreaEvents[Ev];\n  }\n  /**\n   * Retrieve the listener pased to \"removeListener\" for a given eventName\n   * @throws Error if the removeListener method was not invoked exactly once for the given eventName\n   */\n  function getSingleListenerRemoved<Ev extends EventNames<PosterSessionAreaEvents>>(\n    eventName: Ev,\n  ): PosterSessionAreaEvents[Ev] {\n    const removedListeners = removeListenerSpy.mock.calls.filter(\n      eachCall => eachCall[0] === eventName,\n    );\n    if (removedListeners.length !== 1) {\n      throw new Error(\n        `Expected to find exactly one removeListeners call for ${eventName} but found ${removedListeners.length}`,\n      );\n    }\n    return removedListeners[0][1] as unknown as PosterSessionAreaEvents[Ev];\n  }\n\n  describe('PosterHooks', () => {\n    it('[REE2] useStars Registers exactly one posterStarChange listener', () => {\n      act(() => {\n        posterSessionArea.emit('posterStarChange', 1);\n      });\n      act(() => {\n        posterSessionArea.emit('posterStarChange', 2);\n      });\n      act(() => {\n        posterSessionArea.emit('posterStarChange', 3);\n      });\n      getSingleListenerAdded('posterStarChange');\n    });\n    it('[REE2] useStars Unregisters exactly the same posterStarChange listener on unmounting', () => {\n      act(() => {\n        posterSessionArea.emit('posterStarChange', 4);\n      });\n      const listenerAdded = getSingleListenerAdded('posterStarChange');\n      cleanup();\n      expect(getSingleListenerRemoved('posterStarChange')).toBe(listenerAdded);\n    });\n    it('[REE2] useTitle Registers exactly one posterTitleChange listener', () => {\n      act(() => {\n        posterSessionArea.emit('posterTitleChange', 'Title1');\n      });\n      act(() => {\n        posterSessionArea.emit('posterTitleChange', 'Title2');\n      });\n      act(() => {\n        posterSessionArea.emit('posterTitleChange', 'Title3');\n      });\n      getSingleListenerAdded('posterTitleChange');\n    });\n    it('[REE2] useTitle Unregisters exactly the same posterTitleChange listener on unmounting', () => {\n      act(() => {\n        posterSessionArea.emit('posterTitleChange', 'Title4');\n      });\n      const listenerAdded = getSingleListenerAdded('posterTitleChange');\n      cleanup();\n      expect(getSingleListenerRemoved('posterTitleChange')).toBe(listenerAdded);\n    });\n    it('[REE2] useImageContents Registers exactly one posterImageContentsChange listener', () => {\n      act(() => {\n        posterSessionArea.emit('posterImageContentsChange', 'cont1');\n      });\n      act(() => {\n        posterSessionArea.emit('posterImageContentsChange', 'cont2');\n      });\n      act(() => {\n        posterSessionArea.emit('posterImageContentsChange', 'cont3');\n      });\n      getSingleListenerAdded('posterImageContentsChange');\n    });\n    it('[REE2] useImageContents Unregisters exactly the same posterImageContentsChange listener on unmounting', () => {\n      act(() => {\n        posterSessionArea.emit('posterImageContentsChange', 'cont4');\n      });\n      const listenerAdded = getSingleListenerAdded('posterImageContentsChange');\n      cleanup();\n      expect(getSingleListenerRemoved('posterImageContentsChange')).toBe(listenerAdded);\n    });\n    it('Removes the listeners and adds new ones if the controller changes', () => {\n      const origStarChange = getSingleListenerAdded('posterStarChange');\n      const origTitleChange = getSingleListenerAdded('posterTitleChange');\n      const origImageContentsChange = getSingleListenerAdded('posterImageContentsChange');\n\n      const newPosterSessionArea = new PosterSessionAreaController({\n        id: nanoid(),\n        stars: 50,\n        title: nanoid(),\n        imageContents: nanoid(),\n      });\n      const newAddListenerSpy = jest.spyOn(newPosterSessionArea, 'addListener');\n      renderData.rerender(renderPosterSessionArea(newPosterSessionArea, townController));\n\n      expect(getSingleListenerRemoved('posterStarChange')).toBe(origStarChange);\n      expect(getSingleListenerRemoved('posterTitleChange')).toBe(origTitleChange);\n      expect(getSingleListenerRemoved('posterImageContentsChange')).toBe(origImageContentsChange);\n\n      getSingleListenerAdded('posterStarChange', newAddListenerSpy);\n      getSingleListenerAdded('posterTitleChange', newAddListenerSpy);\n      getSingleListenerAdded('posterImageContentsChange', newAddListenerSpy);\n    });\n  });\n});\n"},"src/components/SocialSidebar/PlayersList.test.tsx":{"tests":[{"id":"120","name":"PlayersInTownList Heading Displays a heading \"Current town: townName","location":{"start":{"column":6,"line":89}}},{"id":"121","name":"PlayersInTownList Heading Includes a tooltip that has the town ID","location":{"start":{"column":6,"line":94}}},{"id":"122","name":"PlayersInTownList Renders a list of all players' user names, without checking sort","location":{"start":{"column":4,"line":103}}},{"id":"123","name":"PlayersInTownList Renders the players' names in a PlayerName component","location":{"start":{"column":4,"line":108}}},{"id":"124","name":"PlayersInTownList Displays players' usernames in ascending alphabetical order","location":{"start":{"column":4,"line":119}}},{"id":"125","name":"PlayersInTownList Does not mutate the array returned by usePlayersInTown","location":{"start":{"column":4,"line":124}}},{"id":"126","name":"PlayersInTownList Adds players to the list when they are added to the town","location":{"start":{"column":4,"line":131}}},{"id":"127","name":"PlayersInTownList Removes players from the list when they are removed from the town","location":{"start":{"column":4,"line":147}}}],"source":"import { ChakraProvider } from '@chakra-ui/react';\nimport '@testing-library/jest-dom';\nimport '@testing-library/jest-dom/extend-expect';\nimport { render, RenderResult, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\nimport TownController, * as TownControllerHooks from '../../classes/TownController';\nimport PlayerController from '../../classes/PlayerController';\nimport * as useTownController from '../../hooks/useTownController';\nimport { mockTownController } from '../../TestUtils';\nimport { PlayerLocation } from '../../types/CoveyTownSocket';\nimport * as PlayerName from './PlayerName';\nimport PlayersList from './PlayersList';\n\ndescribe('PlayersInTownList', () => {\n  const randomLocation = (): PlayerLocation => ({\n    moving: Math.random() < 0.5,\n    rotation: 'front',\n    x: Math.random() * 1000,\n    y: Math.random() * 1000,\n  });\n  const wrappedPlayersListComponent = () => (\n    <ChakraProvider>\n      <React.StrictMode>\n        <PlayersList />\n      </React.StrictMode>\n    </ChakraProvider>\n  );\n  const renderPlayersList = () => render(wrappedPlayersListComponent());\n  let consoleErrorSpy: jest.SpyInstance<void, [message?: any, ...optionalParms: any[]]>;\n  let usePlayersSpy: jest.SpyInstance<PlayerController[], []>;\n  let useTownControllerSpy: jest.SpyInstance<TownController, []>;\n  let players: PlayerController[] = [];\n  let townID: string;\n  let townFriendlyName: string;\n  const expectProperlyRenderedPlayersList = async (\n    renderData: RenderResult,\n    playersToExpect: PlayerController[],\n  ) => {\n    const listEntries = await renderData.findAllByRole('listitem');\n    expect(listEntries.length).toBe(playersToExpect.length); // expect same number of players\n    const playersSortedCorrectly = playersToExpect\n      .map(p => p.userName)\n      .sort((p1, p2) => p1.localeCompare(p2, undefined, { numeric: true, sensitivity: 'base' }));\n    for (let i = 0; i < playersSortedCorrectly.length; i += 1) {\n      expect(listEntries[i]).toHaveTextContent(playersSortedCorrectly[i]);\n      const parentComponent = listEntries[i].parentNode;\n      if (parentComponent) {\n        expect(parentComponent.nodeName).toBe('OL'); // list items expected to be directly nested in an ordered list\n      }\n    }\n  };\n  beforeAll(() => {\n    // Spy on console.error and intercept react key warnings to fail test\n    consoleErrorSpy = jest.spyOn(global.console, 'error');\n    consoleErrorSpy.mockImplementation((message?, ...optionalParams) => {\n      const stringMessage = message as string;\n      if (stringMessage.includes && stringMessage.includes('children with the same key,')) {\n        throw new Error(stringMessage.replace('%s', optionalParams[0]));\n      } else if (stringMessage.includes && stringMessage.includes('warning-keys')) {\n        throw new Error(stringMessage.replace('%s', optionalParams[0]));\n      }\n      // eslint-disable-next-line no-console -- we are wrapping the console with a spy to find react warnings\n      console.warn(message, ...optionalParams);\n    });\n    usePlayersSpy = jest.spyOn(TownControllerHooks, 'usePlayers');\n    useTownControllerSpy = jest.spyOn(useTownController, 'default');\n  });\n\n  beforeEach(() => {\n    players = [];\n    for (let i = 0; i < 10; i += 1) {\n      players.push(\n        new PlayerController(\n          `testingPlayerID${i}-${nanoid()}`,\n          `testingPlayerUser${i}-${nanoid()}}`,\n          randomLocation(),\n        ),\n      );\n    }\n    usePlayersSpy.mockReturnValue(players);\n    townID = nanoid();\n    townFriendlyName = nanoid();\n    const mockedTownController = mockTownController({ friendlyName: townFriendlyName, townID });\n    useTownControllerSpy.mockReturnValue(mockedTownController);\n  });\n  describe('Heading', () => {\n    it('Displays a heading \"Current town: townName', async () => {\n      const renderData = renderPlayersList();\n      const heading = await renderData.findByRole('heading', { level: 2 });\n      expect(heading).toHaveTextContent(`Current town: ${townFriendlyName}`);\n    });\n    it('Includes a tooltip that has the town ID', async () => {\n      const renderData = renderPlayersList();\n      const heading = await renderData.findByRole('heading', { level: 2 });\n      expect(renderData.queryByRole('tooltip')).toBeNull(); // no tooltip visible yet\n      userEvent.hover(heading);\n      const toolTip = await renderData.findByRole('tooltip'); // should be just one...\n      expect(toolTip).toHaveTextContent(`Town ID: ${townID}`);\n    });\n  });\n  it(\"Renders a list of all players' user names, without checking sort\", async () => {\n    // players array is already sorted correctly\n    const renderData = renderPlayersList();\n    await expectProperlyRenderedPlayersList(renderData, players);\n  });\n  it(\"Renders the players' names in a PlayerName component\", async () => {\n    const mockPlayerName = jest.spyOn(PlayerName, 'default');\n    try {\n      renderPlayersList();\n      await waitFor(() => {\n        expect(mockPlayerName).toBeCalledTimes(players.length);\n      });\n    } finally {\n      mockPlayerName.mockRestore();\n    }\n  });\n  it(\"Displays players' usernames in ascending alphabetical order\", async () => {\n    players.reverse();\n    const renderData = renderPlayersList();\n    await expectProperlyRenderedPlayersList(renderData, players);\n  });\n  it('Does not mutate the array returned by usePlayersInTown', async () => {\n    players.reverse();\n    const copyOfArrayPassedToComponent = players.concat([]);\n    const renderData = renderPlayersList();\n    await expectProperlyRenderedPlayersList(renderData, players);\n    expect(players).toEqual(copyOfArrayPassedToComponent); // expect that the players array is unchanged by the compoennt\n  });\n  it('Adds players to the list when they are added to the town', async () => {\n    const renderData = renderPlayersList();\n    await expectProperlyRenderedPlayersList(renderData, players);\n    for (let i = 0; i < players.length; i += 1) {\n      const newPlayers = players.concat([\n        new PlayerController(\n          `testingPlayerID-${i}.new`,\n          `testingPlayerUser${i}.new`,\n          randomLocation(),\n        ),\n      ]);\n      usePlayersSpy.mockReturnValue(newPlayers);\n      renderData.rerender(wrappedPlayersListComponent());\n      await expectProperlyRenderedPlayersList(renderData, newPlayers);\n    }\n  });\n  it('Removes players from the list when they are removed from the town', async () => {\n    const renderData = renderPlayersList();\n    await expectProperlyRenderedPlayersList(renderData, players);\n    for (let i = 0; i < players.length; i += 1) {\n      const newPlayers = players.splice(i, 1);\n      usePlayersSpy.mockReturnValue(newPlayers);\n      renderData.rerender(wrappedPlayersListComponent());\n      await expectProperlyRenderedPlayersList(renderData, newPlayers);\n    }\n  });\n});\n"},"src/classes/PosterSessionAreaController.test.ts":{"tests":[{"id":"128","name":"[REE1] PosterSessionAreaController Setting star property updates the property and emits a posterStarChange event if the property changes","location":{"start":{"column":6,"line":32}}},{"id":"129","name":"[REE1] PosterSessionAreaController Setting star property does not emit a posterStarChange event if the star property does not change","location":{"start":{"column":6,"line":37}}},{"id":"130","name":"[REE1] PosterSessionAreaController Setting title property updates the property and emits a posterTitleChange event if the property changes","location":{"start":{"column":6,"line":43}}},{"id":"131","name":"[REE1] PosterSessionAreaController Setting title property does not emit a posterTitleChange event if the title property does not change","location":{"start":{"column":6,"line":49}}},{"id":"132","name":"[REE1] PosterSessionAreaController Setting imageContents property updates the property and emits a posterImageContentsChange event if the property changes","location":{"start":{"column":6,"line":55}}},{"id":"133","name":"[REE1] PosterSessionAreaController Setting imageContents property does not emit a posterImageContentsChange event if the title property does not change","location":{"start":{"column":6,"line":61}}},{"id":"134","name":"[REE1] PosterSessionAreaController posterSessionAreaModel Carries through all of the properties","location":{"start":{"column":6,"line":67}}},{"id":"135","name":"[REE1] PosterSessionAreaController updateFrom Updates the title, imageContents and stars properties","location":{"start":{"column":6,"line":73}}},{"id":"136","name":"[REE1] PosterSessionAreaController updateFrom Does not update the id property","location":{"start":{"column":6,"line":88}}}],"source":"import { mock, mockClear, MockProxy } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport { PosterSessionArea } from '../generated/client';\nimport TownController from './TownController';\nimport PosterSessionAreaController, {\n  PosterSessionAreaEvents,\n} from './PosterSessionAreaController';\n\ndescribe('[REE1] PosterSessionAreaController', () => {\n  // A valid PosterSessionArea to be reused within the tests\n  let testArea: PosterSessionAreaController;\n  let testAreaModel: PosterSessionArea;\n  const townController: MockProxy<TownController> = mock<TownController>();\n  const mockListeners = mock<PosterSessionAreaEvents>();\n  beforeEach(() => {\n    testAreaModel = {\n      id: nanoid(),\n      title: nanoid(),\n      imageContents: nanoid(),\n      stars: 1,\n    };\n    testArea = new PosterSessionAreaController(testAreaModel);\n    mockClear(townController);\n    mockClear(mockListeners.posterImageContentsChange);\n    mockClear(mockListeners.posterStarChange);\n    mockClear(mockListeners.posterTitleChange);\n    testArea.addListener('posterTitleChange', mockListeners.posterTitleChange);\n    testArea.addListener('posterImageContentsChange', mockListeners.posterImageContentsChange);\n    testArea.addListener('posterStarChange', mockListeners.posterStarChange);\n  });\n  describe('Setting star property', () => {\n    it('updates the property and emits a posterStarChange event if the property changes', () => {\n      const newStars = ++testArea.stars;\n      expect(mockListeners.posterStarChange).toBeCalledWith(newStars);\n      expect(testArea.stars).toEqual(newStars);\n    });\n    it('does not emit a posterStarChange event if the star property does not change', () => {\n      testArea.stars = testAreaModel.stars;\n      expect(mockListeners.posterStarChange).not.toBeCalled();\n    });\n  });\n  describe('Setting title property', () => {\n    it('updates the property and emits a posterTitleChange event if the property changes', () => {\n      const newTitle = nanoid();\n      testArea.title = newTitle;\n      expect(mockListeners.posterTitleChange).toBeCalledWith(newTitle);\n      expect(testArea.title).toEqual(newTitle);\n    });\n    it('does not emit a posterTitleChange event if the title property does not change', () => {\n      testArea.title = `${testAreaModel.title}`;\n      expect(mockListeners.posterTitleChange).not.toBeCalled();\n    });\n  });\n  describe('Setting imageContents property', () => {\n    it('updates the property and emits a posterImageContentsChange event if the property changes', () => {\n      const newContents = nanoid();\n      testArea.imageContents = newContents;\n      expect(mockListeners.posterImageContentsChange).toBeCalledWith(newContents);\n      expect(testArea.imageContents).toEqual(newContents);\n    });\n    it('does not emit a posterImageContentsChange event if the title property does not change', () => {\n      testArea.imageContents = `${testAreaModel.imageContents}`;\n      expect(mockListeners.posterImageContentsChange).not.toBeCalled();\n    });\n  });\n  describe('posterSessionAreaModel', () => {\n    it('Carries through all of the properties', () => {\n      const model = testArea.posterSessionAreaModel();\n      expect(model).toEqual(testAreaModel);\n    });\n  });\n  describe('updateFrom', () => {\n    it('Updates the title, imageContents and stars properties', () => {\n      const newModel: PosterSessionArea = {\n        id: testAreaModel.id,\n        title: nanoid(),\n        imageContents: nanoid(),\n        stars: testAreaModel.stars + 1,\n      };\n      testArea.updateFrom(newModel);\n      expect(testArea.title).toEqual(newModel.title);\n      expect(testArea.imageContents).toEqual(newModel.imageContents);\n      expect(testArea.stars).toEqual(newModel.stars);\n      expect(mockListeners.posterStarChange).toBeCalledWith(newModel.stars);\n      expect(mockListeners.posterTitleChange).toBeCalledWith(newModel.title);\n      expect(mockListeners.posterImageContentsChange).toBeCalledWith(newModel.imageContents);\n    });\n    it('Does not update the id property', () => {\n      const existingID = testArea.id;\n      const newModel: PosterSessionArea = {\n        id: nanoid(),\n        title: nanoid(),\n        imageContents: nanoid(),\n        stars: testAreaModel.stars + 1,\n      };\n      testArea.updateFrom(newModel);\n      expect(testArea.id).toEqual(existingID);\n    });\n  });\n});\n"},"src/classes/ViewingAreaController.test.ts":{"tests":[{"id":"137","name":"[T2] ViewingAreaController Setting video property updates the property and emits a videoChange event if the property changes","location":{"start":{"column":6,"line":30}}},{"id":"138","name":"[T2] ViewingAreaController Setting video property does not emit a videoChange event if the video property does not change","location":{"start":{"column":6,"line":36}}},{"id":"139","name":"[T2] ViewingAreaController Setting elapsedTimeSec property updates the model and emits a progressChange event if the property changes","location":{"start":{"column":6,"line":42}}},{"id":"140","name":"[T2] ViewingAreaController Setting elapsedTimeSec property does not emit a progressChange event if the elapsedTimeSec property does not change","location":{"start":{"column":6,"line":48}}},{"id":"141","name":"[T2] ViewingAreaController Setting isPlaying property updates the model and emits a playbackChange event if the property changes","location":{"start":{"column":6,"line":54}}},{"id":"142","name":"[T2] ViewingAreaController Setting isPlaying property does not emit a playbackChange event if the isPlaying property does not change","location":{"start":{"column":6,"line":60}}},{"id":"143","name":"[T2] ViewingAreaController viewingAreaModel Carries through all of the properties","location":{"start":{"column":6,"line":67}}},{"id":"144","name":"[T2] ViewingAreaController updateFrom Updates the isPlaying, elapsedTimeSec and video properties","location":{"start":{"column":6,"line":73}}},{"id":"145","name":"[T2] ViewingAreaController updateFrom Does not update the id property","location":{"start":{"column":6,"line":88}}}],"source":"import { mock, mockClear, MockProxy } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport { ViewingArea } from '../generated/client';\nimport TownController from './TownController';\nimport ViewingAreaController, { ViewingAreaEvents } from './ViewingAreaController';\n\ndescribe('[T2] ViewingAreaController', () => {\n  // A valid ViewingAreaController to be reused within the tests\n  let testArea: ViewingAreaController;\n  let testAreaModel: ViewingArea;\n  const townController: MockProxy<TownController> = mock<TownController>();\n  const mockListeners = mock<ViewingAreaEvents>();\n  beforeEach(() => {\n    testAreaModel = {\n      id: nanoid(),\n      isPlaying: true,\n      elapsedTimeSec: 12,\n      video: nanoid(),\n    };\n    testArea = new ViewingAreaController(testAreaModel);\n    mockClear(townController);\n    mockClear(mockListeners.playbackChange);\n    mockClear(mockListeners.progressChange);\n    mockClear(mockListeners.videoChange);\n    testArea.addListener('playbackChange', mockListeners.playbackChange);\n    testArea.addListener('progressChange', mockListeners.progressChange);\n    testArea.addListener('videoChange', mockListeners.videoChange);\n  });\n  describe('Setting video property', () => {\n    it('updates the property and emits a videoChange event if the property changes', () => {\n      const newVideo = nanoid();\n      testArea.video = newVideo;\n      expect(mockListeners.videoChange).toBeCalledWith(newVideo);\n      expect(testArea.video).toEqual(newVideo);\n    });\n    it('does not emit a videoChange event if the video property does not change', () => {\n      testArea.video = `${testAreaModel.video}`;\n      expect(mockListeners.videoChange).not.toBeCalled();\n    });\n  });\n  describe('Setting elapsedTimeSec property', () => {\n    it('updates the model and emits a progressChange event if the property changes', () => {\n      const newElapsedTimeSec = testArea.elapsedTimeSec + 1;\n      testArea.elapsedTimeSec = newElapsedTimeSec;\n      expect(mockListeners.progressChange).toBeCalledWith(newElapsedTimeSec);\n      expect(testArea.elapsedTimeSec).toEqual(newElapsedTimeSec);\n    });\n    it('does not emit a progressChange event if the elapsedTimeSec property does not change', () => {\n      testArea.elapsedTimeSec = testAreaModel.elapsedTimeSec;\n      expect(mockListeners.progressChange).not.toBeCalled();\n    });\n  });\n  describe('Setting isPlaying property', () => {\n    it('updates the model and emits a playbackChange event if the property changes', () => {\n      const newValue = !testAreaModel.isPlaying;\n      testArea.isPlaying = newValue;\n      expect(mockListeners.playbackChange).toBeCalledWith(newValue);\n      expect(testArea.isPlaying).toEqual(newValue);\n    });\n    it('does not emit a playbackChange event if the isPlaying property does not change', () => {\n      const existingValue = testAreaModel.isPlaying;\n      testArea.isPlaying = existingValue;\n      expect(mockListeners.playbackChange).not.toBeCalled();\n    });\n  });\n  describe('viewingAreaModel', () => {\n    it('Carries through all of the properties', () => {\n      const model = testArea.viewingAreaModel();\n      expect(model).toEqual(testAreaModel);\n    });\n  });\n  describe('updateFrom', () => {\n    it('Updates the isPlaying, elapsedTimeSec and video properties', () => {\n      const newModel: ViewingArea = {\n        id: testAreaModel.id,\n        video: nanoid(),\n        elapsedTimeSec: testArea.elapsedTimeSec + 1,\n        isPlaying: !testArea.isPlaying,\n      };\n      testArea.updateFrom(newModel);\n      expect(testArea.video).toEqual(newModel.video);\n      expect(testArea.elapsedTimeSec).toEqual(newModel.elapsedTimeSec);\n      expect(testArea.isPlaying).toEqual(newModel.isPlaying);\n      expect(mockListeners.videoChange).toBeCalledWith(newModel.video);\n      expect(mockListeners.progressChange).toBeCalledWith(newModel.elapsedTimeSec);\n      expect(mockListeners.playbackChange).toBeCalledWith(newModel.isPlaying);\n    });\n    it('Does not update the id property', () => {\n      const existingID = testArea.id;\n      const newModel: ViewingArea = {\n        id: nanoid(),\n        video: nanoid(),\n        elapsedTimeSec: testArea.elapsedTimeSec + 1,\n        isPlaying: !testArea.isPlaying,\n      };\n      testArea.updateFrom(newModel);\n      expect(testArea.id).toEqual(existingID);\n    });\n  });\n});\n"},"src/components/Town/interactables/PosterViewerImage.test.tsx":{"tests":[{"id":"146","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] cant restar a poster Starring a poster Increments the number of stars when clicking \"star\" button","location":{"start":{"column":6,"line":54}}},{"id":"147","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] cant restar a poster Starring a poster Displays the correct number of starting stars","location":{"start":{"column":6,"line":73}}},{"id":"148","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] sync image contents with the town controller Viewing a poster Displays the image contents","location":{"start":{"column":6,"line":80}}},{"id":"149","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] sync image contents with the town controller Viewing a poster Only retrieves the image contents once","location":{"start":{"column":6,"line":84}}},{"id":"150","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] sync image contents with the town controller Viewing a poster Includes the title of the poster in the header","location":{"start":{"column":6,"line":88}}},{"id":"151","name":"PosterViewer [REE3] createPoster Poster Image Viewer [REE3] sync image contents with the town controller Viewing a poster Unpauses the game when the modal is closed","location":{"start":{"column":6,"line":95}}}],"source":"import { ChakraProvider } from '@chakra-ui/react';\nimport { fireEvent, render, RenderResult, waitFor } from '@testing-library/react';\nimport { DeepMockProxy, mockClear } from 'jest-mock-extended';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\nimport { act } from 'react-dom/test-utils';\nimport PosterSessionAreaController from '../../../classes/PosterSessionAreaController';\nimport TownController from '../../../classes/TownController';\nimport TownControllerContext from '../../../contexts/TownControllerContext';\nimport { mockTownController } from '../../../TestUtils';\nimport { PosterImage } from './PosterViewer';\n\nfunction renderPosterSessionArea(\n  posterSessionArea: PosterSessionAreaController,\n  townController: TownController,\n) {\n  let selectIsOpen = posterSessionArea.imageContents === undefined;\n  const close = () => {\n    selectIsOpen = false;\n  };\n  return (\n    <ChakraProvider>\n      <TownControllerContext.Provider value={townController}>\n        <PosterImage controller={posterSessionArea} isOpen={!selectIsOpen} close={close} />\n      </TownControllerContext.Provider>\n    </ChakraProvider>\n  );\n}\n\ndescribe('PosterViewer [REE3] createPoster Poster Image Viewer', () => {\n  const mockToast = jest.fn();\n  let posterSessionArea: PosterSessionAreaController;\n  let starButton: HTMLElement;\n\n  let townController: DeepMockProxy<TownController>;\n\n  let renderData: RenderResult;\n  beforeEach(() => {\n    mockClear(mockToast);\n    posterSessionArea = new PosterSessionAreaController({\n      id: `id-${nanoid()}`,\n      title: `title-${nanoid()}`,\n      imageContents: `contents-${nanoid()}`,\n      stars: 134,\n    });\n    townController = mockTownController({ posterSessionAreas: [posterSessionArea] });\n\n    renderData = render(renderPosterSessionArea(posterSessionArea, townController));\n\n    starButton = renderData.getByRole('button', { name: /Star/i });\n  });\n\n  describe('[REE3] cant restar a poster Starring a poster', () => {\n    it('Increments the number of stars when clicking \"star\" button', async () => {\n      const prevStars = posterSessionArea.stars;\n      const starLabel = renderData.getByRole('contentinfo');\n      await waitFor(() => expect(starLabel).toHaveTextContent('Number of stars: ' + prevStars));\n      act(() => {\n        fireEvent.click(starButton);\n      });\n      await waitFor(() =>\n        expect(starLabel).toHaveTextContent('Number of stars: ' + (prevStars + 1)),\n      );\n      act(() => {\n        fireEvent.click(starButton);\n      });\n      // don't star again\n      expect(townController.incrementPosterSessionAreaStars).toHaveBeenCalledTimes(1);\n      expect(townController.incrementPosterSessionAreaStars).toHaveBeenCalledWith(\n        posterSessionArea,\n      );\n    });\n    it('Displays the correct number of starting stars', () => {\n      const starLabel = renderData.getByRole('contentinfo');\n      expect(starLabel).toHaveTextContent('Number of stars: ' + posterSessionArea.stars);\n    });\n  });\n\n  describe('[REE3] sync image contents with the town controller Viewing a poster', () => {\n    it('Displays the image contents', () => {\n      const image = renderData.getByRole('img');\n      expect(image).toHaveAttribute('src', posterSessionArea.imageContents);\n    });\n    it('Only retrieves the image contents once', () => {\n      renderData.rerender(renderPosterSessionArea(posterSessionArea, townController));\n      expect(townController.getPosterSessionAreaImageContents).toHaveBeenCalledTimes(1);\n    });\n    it('Includes the title of the poster in the header', () => {\n      const header = renderData.getByRole('banner');\n      const { title } = posterSessionArea;\n      if (title) {\n        expect(header).toHaveTextContent(title);\n      }\n    });\n    it('Unpauses the game when the modal is closed', () => {\n      const close = renderData.getByRole('button', { name: /Close/i });\n      act(() => {\n        fireEvent.click(close);\n      });\n      expect(townController.unPause).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"}},"projectRoot":"/home/ellen/Documents/NEUCourses/CS4530_TA_again/spring23-ip2-autograder/handout/frontend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information","packageManager":"npm","reporters":["html","clear-text","json","progress"],"buildCommand":"npm run stryker-prepare","testRunner":"jest","coverageAnalysis":"perTest","timeoutFactor":5,"timeoutMS":15000,"concurrency":1,"jest":{"configFile":"jest.config.cjs","projectType":"custom","enableFindRelatedTests":true},"mutate":["src/classes/PosterSessionAreaController.ts:64-108","src/classes/PosterSessionAreaController.ts:131-136"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false},"framework":{"name":"StrykerJS","version":"6.2.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/typescript-checker":"6.2.2","jest":"28.1.3","react-scripts":"5.0.1","typescript":"4.7.4","webpack":"5.73.0","ts-jest":"28.0.5"}}}